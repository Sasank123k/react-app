Below is the full set of updated files reflecting your three changes:

1. **Updated Metadata**  
2. **Frontend updates:**  
   – A validation step before save (no field value may be empty)  
   – Removed the “JIL Editor” heading and moved the dropdown and Save button to one row  
   – Removed the “Child Jobs” heading below any job  
   – Adjusted CSS: decreased the remove button’s width and increased the key–value input’s width (removing any max‑width)

Review each file below and let me know if you need further refinements.

---

## 1. Updated Metadata JSON

All default values have been replaced with an empty string; the key name for the date condition has been updated to “date_conditions” for every job definition; and for the CMD job, we’ve added the missing “fail_codes” (and ensured “success_codes” is present).

```json
{
  "document": "JIL Editor v1",
  "metaData": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Autosys JIL File Metadata",
    "description": "Common metadata schema for JIL files (union of Ingress and EDL flows).",
    "type": "object",
    "properties": {
      "mainBox": {
        "$ref": "#/definitions/MainBOX"
      }
    },
    "required": [
      "mainBox"
    ],
    "definitions": {
      "MainBOX": {
        "type": "object",
        "description": "Main BOX job (top-level).",
        "properties": {
          "insert_job": {
            "type": "string",
            "description": "Job name for the main box",
            "default": ""
          },
          "job_type": {
            "type": "string",
            "enum": [
              "BOX"
            ],
            "description": "Job type for the main box",
            "default": ""
          },
          "owner": {
            "type": "string",
            "description": "Owner of the job",
            "default": ""
          },
          "permission": {
            "type": "string",
            "description": "Permissions",
            "default": ""
          },
          "date_conditions": {
            "type": "string",
            "description": "Date condition flag",
            "default": ""
          },
          "description": {
            "type": "string",
            "description": "Job description",
            "default": ""
          },
          "alarm_if_fail": {
            "type": "string",
            "description": "Alarm if job fails",
            "default": ""
          },
          "alarm_if_terminated": {
            "type": "string",
            "description": "Alarm if job is terminated",
            "default": ""
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "default": ""
          },
          "group": {
            "type": "string",
            "description": "Group name",
            "default": ""
          },
          "application": {
            "type": "string",
            "description": "Application name",
            "default": ""
          },
          "properties": {
            "type": "array",
            "description": "Nested jobs within the main box (sub-boxes, CMD, FW)",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/SubBOX"
                },
                {
                  "$ref": "#/definitions/CMD"
                },
                {
                  "$ref": "#/definitions/FW"
                }
              ]
            }
          }
        },
        "required": [
          "insert_job",
          "job_type",
          "owner",
          "permission",
          "date_conditions",
          "description",
          "alarm_if_fail",
          "alarm_if_terminated",
          "timezone",
          "group",
          "application",
          "properties"
        ]
      },
      "SubBOX": {
        "type": "object",
        "description": "Sub BOX job (nested box within another box).",
        "properties": {
          "insert_job": {
            "type": "string",
            "description": "Job name for the sub-box",
            "default": ""
          },
          "job_type": {
            "type": "string",
            "enum": [
              "BOX"
            ],
            "description": "Job type for the sub-box",
            "default": ""
          },
          "box_name": {
            "type": "string",
            "description": "Name of the parent box (should match main box's insert_job)",
            "default": ""
          },
          "owner": {
            "type": "string",
            "description": "Owner of the job",
            "default": ""
          },
          "permission": {
            "type": "string",
            "description": "Permissions",
            "default": ""
          },
          "date_conditions": {
            "type": "string",
            "description": "Date condition flag",
            "default": ""
          },
          "condition": {
            "type": "string",
            "description": "Condition for the sub-box",
            "default": ""
          },
          "description": {
            "type": "string",
            "description": "Job description",
            "default": ""
          },
          "alarm_if_fail": {
            "type": "string",
            "description": "Alarm if job fails",
            "default": ""
          },
          "alarm_if_terminated": {
            "type": "string",
            "description": "Alarm if job is terminated",
            "default": ""
          },
          "group": {
            "type": "string",
            "description": "Group name",
            "default": ""
          },
          "application": {
            "type": "string",
            "description": "Application name",
            "default": ""
          },
          "properties": {
            "type": "array",
            "description": "Nested jobs within this sub-box",
            "default": [],
            "items": {
              "oneOf": [
                {
                  "$ref": "#/definitions/SubBOX"
                },
                {
                  "$ref": "#/definitions/CMD"
                },
                {
                  "$ref": "#/definitions/FW"
                }
              ]
            }
          }
        },
        "required": [
          "insert_job",
          "job_type",
          "box_name",
          "owner",
          "permission",
          "date_conditions",
          "condition",
          "description",
          "alarm_if_fail",
          "alarm_if_terminated",
          "group",
          "application",
          "properties"
        ]
      },
      "CMD": {
        "type": "object",
        "description": "CMD job (command job).",
        "properties": {
          "insert_job": {
            "type": "string",
            "description": "Job name for the CMD job",
            "default": ""
          },
          "job_type": {
            "type": "string",
            "enum": [
              "CMD"
            ],
            "description": "Job type for CMD",
            "default": ""
          },
          "box_name": {
            "type": "string",
            "description": "Name of the parent sub-box",
            "default": ""
          },
          "command": {
            "type": "string",
            "description": "Command to execute",
            "default": ""
          },
          "machine": {
            "type": "string",
            "description": "Machine name",
            "default": ""
          },
          "owner": {
            "type": "string",
            "description": "Owner of the job",
            "default": ""
          },
          "permission": {
            "type": "string",
            "description": "Permissions",
            "default": ""
          },
          "date_conditions": {
            "type": "string",
            "description": "Date condition flag",
            "default": ""
          },
          "condition": {
            "type": "string",
            "description": "Condition for the CMD job",
            "default": ""
          },
          "description": {
            "type": "string",
            "description": "Job description",
            "default": ""
          },
          "std_out_file": {
            "type": "string",
            "description": "Standard output file",
            "default": ""
          },
          "std_err_file": {
            "type": "string",
            "description": "Standard error file",
            "default": ""
          },
          "alarm_if_fail": {
            "type": "string",
            "description": "Alarm if job fails",
            "default": ""
          },
          "profile": {
            "type": "string",
            "description": "Profile name",
            "default": ""
          },
          "job_load": {
            "type": "string",
            "description": "Job load",
            "default": ""
          },
          "priority": {
            "type": "string",
            "description": "Job priority",
            "default": ""
          },
          "alarm_if_terminated": {
            "type": "string",
            "description": "Alarm if job is terminated",
            "default": ""
          },
          "timezone": {
            "type": "string",
            "description": "Timezone",
            "default": ""
          },
          "group": {
            "type": "string",
            "description": "Group name",
            "default": ""
          },
          "application": {
            "type": "string",
            "description": "Application name",
            "default": ""
          },
          "success_codes": {
            "type": "string",
            "description": "Success codes",
            "default": ""
          },
          "fail_codes": {
            "type": "string",
            "description": "Fail codes",
            "default": ""
          }
        },
        "required": [
          "insert_job",
          "job_type",
          "box_name",
          "command",
          "machine",
          "owner",
          "permission",
          "date_conditions",
          "condition",
          "description",
          "std_out_file",
          "std_err_file",
          "alarm_if_fail",
          "profile",
          "job_load",
          "priority",
          "alarm_if_terminated",
          "timezone",
          "group",
          "application",
          "success_codes",
          "fail_codes"
        ]
      },
      "FW": {
        "type": "object",
        "description": "FW job (file watcher job).",
        "properties": {
          "insert_job": {
            "type": "string",
            "description": "Job name for the FW job",
            "default": ""
          },
          "job_type": {
            "type": "string",
            "enum": [
              "FW"
            ],
            "description": "Job type for FW",
            "default": ""
          },
          "box_name": {
            "type": "string",
            "description": "Name of the parent box",
            "default": ""
          },
          "machine": {
            "type": "string",
            "description": "Machine name",
            "default": ""
          },
          "owner": {
            "type": "string",
            "description": "Owner of the job",
            "default": ""
          },
          "permission": {
            "type": "string",
            "description": "Permissions",
            "default": ""
          },
          "date_conditions": {
            "type": "string",
            "description": "Date condition flag",
            "default": ""
          },
          "condition": {
            "type": "string",
            "description": "Condition for the FW job",
            "default": ""
          },
          "description": {
            "type": "string",
            "description": "Job description",
            "default": ""
          },
          "term_run_time": {
            "type": "string",
            "description": "Terminal run time",
            "default": ""
          },
          "max_run_alarm": {
            "type": "string",
            "description": "Maximum run alarm time",
            "default": ""
          },
          "alarm_if_fail": {
            "type": "string",
            "description": "Alarm if job fails",
            "default": ""
          },
          "profile": {
            "type": "string",
            "description": "Profile name",
            "default": ""
          },
          "priority": {
            "type": "string",
            "description": "Job priority",
            "default": ""
          },
          "alarm_if_terminated": {
            "type": "string",
            "description": "Alarm if job is terminated",
            "default": ""
          },
          "group": {
            "type": "string",
            "description": "Group name",
            "default": ""
          },
          "application": {
            "type": "string",
            "description": "Application name",
            "default": ""
          },
          "watch_file": {
            "type": "string",
            "description": "File to watch",
            "default": ""
          },
          "watch_file_min_size": {
            "type": "string",
            "description": "Minimum file size to trigger",
            "default": ""
          },
          "watch_interval": {
            "type": "string",
            "description": "Watch interval (in seconds)",
            "default": ""
          }
        },
        "required": [
          "insert_job",
          "job_type",
          "box_name",
          "machine",
          "owner",
          "permission",
          "date_conditions",
          "condition",
          "description",
          "term_run_time",
          "max_run_alarm",
          "alarm_if_fail",
          "profile",
          "priority",
          "alarm_if_terminated",
          "group",
          "application",
          "watch_file",
          "watch_file_min_size",
          "watch_interval"
        ]
      }
    }
  }
}
```

---

## 2. Frontend Code Updates

### A. Updated JILEditor.jsx

This file now includes the following changes:
- **Validation:** Before save, we run a recursive check that no value is an empty string. If any field is empty, the save is blocked and an alert is shown.
- **Header update:** Removed the “JIL Editor” heading. Now, only the save button (and the navigation dropdown from JILNavigation) appear in that header row.

```jsx
// File: JILEditor.jsx
import React, { useState, useEffect, useContext } from "react";
import { JILEditorContext } from "./JILEditorContext";
import JILFieldRenderer from "./JILFieldRenderer";
import { MICROSERVICE_URL } from "../../../util/Constant";
import { generateSearHeader } from "../../../Authentication";
import { useAppGlobalState } from "@wf/react-library";
import { convertToJILText } from "./JILUtils";
import "./JILEditor.css";

// Recursive function to validate that all fields in the job data are non-empty
const validateJobData = (data) => {
  if (typeof data !== "object" || data === null) {
    return data !== "";
  }
  for (let key in data) {
    if (data.hasOwnProperty(key)) {
      // If the key is "properties", validate each child job recursively.
      if (key === "properties" && Array.isArray(data[key])) {
        for (let child of data[key]) {
          if (!validateJobData(child)) return false;
        }
      } else {
        if (typeof data[key] === "object") {
          if (!validateJobData(data[key])) return false;
        } else if (data[key] === "") {
          return false;
        }
      }
    }
  }
  return true;
};

const JILEditor = ({ requirementId }) => {
  const { jilFiles, currentFileIndex, setJilFiles, metadata, fileNames } = useContext(JILEditorContext);
  const [rawPreview, setRawPreview] = useState("");
  const globalState = useAppGlobalState();
  const currentFile = jilFiles[currentFileIndex];

  useEffect(() => {
    const previewText = convertToJILText(currentFile.jsonData, metadata.definitions);
    setRawPreview(previewText);
  }, [JSON.stringify(currentFile), metadata.definitions]);

  const handleSave = () => {
    // Validate each JIL file's jsonData recursively.
    let valid = true;
    for (let file of jilFiles) {
      if (!validateJobData(file.jsonData)) {
        valid = false;
        break;
      }
    }
    if (!valid) {
      alert("All fields are mandatory. Please fill in every field before saving.");
      return;
    }

    const payload = {
      jilFiles: jilFiles.map((file, idx) => ({
        fileName: fileNames[idx] || `File_${idx + 1}`,
        jsonData: file.jsonData,
        content: convertToJILText(file.jsonData, metadata.definitions)
      }))
    };

    fetch(`${MICROSERVICE_URL}/api/jilData/${requirementId}`, {
      method: "PUT",
      headers: {
        ...generateSearHeader(globalState),
        "Content-Type": "application/json"
      },
      body: JSON.stringify(payload)
    })
      .then((res) => {
        if (!res.ok) {
          throw new Error("Save failed");
        }
        return res.json();
      })
      .then(() => {
        alert("JIL file saved successfully!");
      })
      .catch((err) => {
        console.error("Error saving JIL file:", err);
      });
  };

  if (!metadata) {
    return <div>Loading metadata...</div>;
  }

  return (
    <div className="jil-editor">
      <div className="jil-editor-header">
        <button onClick={handleSave}>Save</button>
      </div>
      <div className="jil-editor-body">
        <div className="jil-editor-left scroll-container">
          <h4>Structured Editor</h4>
          <div className="scroll-content">
            <JILFieldRenderer
              schema={metadata.definitions.MainBOX}
              definitions={metadata.definitions}
              data={currentFile.jsonData.mainBox || {}}
              path={["mainBox"]}
              onFieldChange={(updatedData) => {
                const newFiles = [...jilFiles];
                newFiles[currentFileIndex].jsonData.mainBox = updatedData;
                setJilFiles(newFiles);
              }}
            />
          </div>
        </div>
        <div className="jil-editor-right scroll-container">
          <h4>Live Preview</h4>
          <textarea readOnly value={rawPreview} />
        </div>
      </div>
    </div>
  );
};

export default JILEditor;
```

---

### B. Updated JILBoxEditor.jsx

In this file, the “Child Jobs” heading has been removed from the child-section.

```jsx
// File: JILBoxEditor.jsx
import React, { useState } from "react";
import JILFieldRenderer from "./JILFieldRenderer";
import { fillDefaults } from "./JILUtils";

const JILBoxEditor = ({ schema, definitions, data, path, onFieldChange, onRemoveJob }) => {
  const [showNewPairDropdown, setShowNewPairDropdown] = useState(false);

  const getOrderedKeys = () => {
    if (schema && schema.properties) {
      return Object.keys(schema.properties).filter((key) => key !== "properties");
    }
    return [];
  };

  const handleChange = (key, value) => {
    const newData = { ...data, [key]: value };
    onFieldChange(newData);
  };

  const removeKeyValuePair = (key) => {
    const newData = { ...data };
    delete newData[key];
    onFieldChange(newData);
  };

  const getAvailableKeys = () => {
    const ordered = getOrderedKeys();
    return ordered.filter((key) => !data.hasOwnProperty(key));
  };

  const renderKeyValuePairs = () => {
    const orderedKeys = getOrderedKeys();
    const rendered = [];
    orderedKeys.forEach((key) => {
      if (data.hasOwnProperty(key)) {
        rendered.push(
          <div key={key} className="jil-keyvalue-row">
            <label>{key}: </label>
            <input
              className="jil-input"
              type="text"
              value={data[key]}
              onChange={(e) => handleChange(key, e.target.value)}
            />
            <button className="jil-remove-btn" onClick={() => removeKeyValuePair(key)}>
              Remove
            </button>
          </div>
        );
      }
    });
    Object.keys(data)
      .filter((key) => key !== "properties" && !orderedKeys.includes(key))
      .forEach((key) => {
        rendered.push(
          <div key={key} className="jil-keyvalue-row">
            <label>{key}: </label>
            <input
              className="jil-input"
              type="text"
              value={data[key]}
              onChange={(e) => handleChange(key, e.target.value)}
            />
            <button className="jil-remove-btn" onClick={() => removeKeyValuePair(key)}>
              Remove
            </button>
          </div>
        );
      });
    return rendered;
  };

  const renderNewPairDropdown = () => {
    const available = getAvailableKeys();
    if (available.length === 0) return null;
    return (
      <select
        className="jil-add-pair-dropdown"
        onChange={(e) => {
          if (e.target.value) {
            handleChange(e.target.value, "");
            setShowNewPairDropdown(false);
          }
        }}
      >
        <option value="">Select key to add</option>
        {available.map((key) => (
          <option key={key} value={key}>
            {key}
          </option>
        ))}
      </select>
    );
  };

  const handleChildChange = (index, childData) => {
    const newProperties = data.properties ? [...data.properties] : [];
    newProperties[index] = childData;
    handleChange("properties", newProperties);
  };

  const addChildJob = (jobType) => {
    let newJob = {};
    if (jobType === "BOX") {
      newJob = fillDefaults(definitions.SubBOX);
    } else if (jobType === "CMD") {
      newJob = fillDefaults(definitions.CMD);
    } else if (jobType === "FW") {
      newJob = fillDefaults(definitions.FW);
    }
    newJob.job_type = jobType;
    if (jobType === "BOX") newJob.properties = [];
    const newProperties = data.properties ? [...data.properties, newJob] : [newJob];
    handleChange("properties", newProperties);
  };

  const renderChildJobs = () => {
    const children = data.properties || [];
    return children.map((child, index) => (
      <div key={index} className="jil-child-job">
        <JILFieldRenderer
          schema={child.job_type === "BOX" ? definitions.SubBOX : {}}
          definitions={definitions}
          data={child}
          path={[...path, "properties", index]}
          onFieldChange={(childData) => handleChildChange(index, childData)}
          onRemoveJob={() => {
            const newProperties = data.properties.filter((_, idx) => idx !== index);
            handleChange("properties", newProperties);
          }}
        />
      </div>
    ));
  };

  return (
    <div className="jil-box-editor">
      <div className="jil-job-header">
        <span>{path[0] === "mainBox" && path.length === 1 ? "Main Box Job" : "Sub Box"}</span>
        <div className="jil-header-actions">
          <select
            className="jil-job-dropdown"
            onChange={(e) => {
              if (e.target.value) {
                addChildJob(e.target.value);
                e.target.value = "";
              }
            }}
          >
            <option value="">Add Child Job...</option>
            <option value="BOX">Sub Box</option>
            <option value="CMD">CMD</option>
            <option value="FW">FW</option>
          </select>
          {path.length > 1 && (
            <button className="jil-remove-job-btn" onClick={() => onRemoveJob && onRemoveJob()}>
              Remove Job
            </button>
          )}
        </div>
      </div>
      <div className="jil-box-content">
        {renderKeyValuePairs()}
        {renderNewPairDropdown()}
      </div>
      <div className="jil-child-section">
        {renderChildJobs()}
      </div>
    </div>
  );
};

export default JILBoxEditor;
```

---

### C. Updated CSS (JILEditor.css)

Adjust the CSS as follows:
- Remove any max‑width constraints from the input fields.
- Decrease the overall size (or padding) of the removal buttons.

```css
/* Container & Global Styles */
.jil-editor-container {
  margin: 20px;
  font-family: Arial, sans-serif;
}

.jil-navigation {
  margin-bottom: 10px;
}

.jil-navigation label {
  margin-right: 5px;
}

/* Editor Layout */
.jil-editor {
  display: flex;
  flex-direction: column;
}

.jil-editor-header {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-bottom: 10px;
}

/* Editor Body */
.jil-editor-body {
  display: flex;
  margin-top: 10px;
  height: 500px;
}

.jil-editor-left,
.jil-editor-right {
  width: 50%;
  padding: 10px;
  box-sizing: border-box;
}

/* Scroll Containers */
.scroll-container {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.scroll-container h4 {
  margin: 0 0 10px 0;
}

.scroll-content {
  flex: 1;
  overflow-y: auto;
}

/* Live Preview */
.jil-editor-right textarea {
  width: 100%;
  height: 100%;
  box-sizing: border-box;
}

/* Job Editor Styles */
.jil-box-editor,
.jil-cmd-editor,
.jil-fw-editor {
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 10px;
}

.jil-job-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #f2f2f2;
  padding: 5px;
  margin-bottom: 10px;
}

.jil-header-actions {
  display: flex;
  align-items: center;
}

.jil-job-dropdown {
  margin-right: 10px;
}

.jil-remove-job-btn {
  background-color: #e57373;
  color: white;
  border: none;
  padding: 2px 4px; /* decreased padding for smaller button */
  font-size: 0.8em;
  cursor: pointer;
}

.jil-remove-job-btn:hover {
  background-color: #ef5350;
}

/* Key-Value Row Styles */
.jil-keyvalue-row {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
}

.jil-keyvalue-row label {
  width: 100px;
  color: black;
  font-weight: bold;
}

.jil-input {
  width: 500px; /* increased width */
  padding: 4px;
  margin-right: 10px;
  max-width: none; /* remove max-width */
}

.jil-remove-btn {
  background-color: #e57373;
  color: white;
  border: none;
  padding: 2px 4px; /* decreased padding for smaller button */
  font-size: 0.8em;
  cursor: pointer;
}

.jil-remove-btn:hover {
  background-color: #ef5350;
}

/* New Pair Dropdown Section */
.jil-add-pair-dropdown {
  margin-top: 10px;
  padding: 4px;
  width: 200px;
}

/* Child Jobs Section */
.jil-child-job {
  margin-left: 20px;
  margin-top: 10px;
}

/* Remove any heading in child section */
.jil-child-section h5 {
  display: none;
}
```

---

## Summary

- **Metadata:**  
  All default values are now empty strings. The key for the date condition is “date_conditions” in every job definition, and missing keys (e.g. `fail_codes`) in CMD have been added.

- **Frontend Adjustments:**  
  - In **JILEditor.jsx**, a validation function ensures that no field is blank before submitting.  
  - The header now only features the Save button (the dropdown remains rendered via JILNavigation separately).  
  - In **JILBoxEditor.jsx**, the "Child Jobs" heading is removed.  
  - Updated CSS modifies the size of remove buttons and enlarges input fields (with no max‑width).

Please review these changes and let me know if any further adjustments are needed.
