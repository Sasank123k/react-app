package com.wellsfargo.utcap.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Service
public class PathConstructorService {

    private static final String GHE_API_BASE = "https://github.wellsfargo.com/api/v3/";
    private final ObjectMapper objectMapper = new ObjectMapper();

    // Expected folder names for Type 1 structure.
    private static final Set<String> EXPECTED_FOLDERS = new HashSet<>();
    static {
        EXPECTED_FOLDERS.add("config");
        EXPECTED_FOLDERS.add("sql");
        EXPECTED_FOLDERS.add("scripts");
        EXPECTED_FOLDERS.add("metadata");
        EXPECTED_FOLDERS.add("hql");
        EXPECTED_FOLDERS.add("ddl");
    }

    /**
     * Determines the SOR folder structure.
     * If at least one folder in "src/batch/{sor}" matches an expected file type folder, returns 1 (Type 1);
     * otherwise, returns 2 (Type 2).
     */
    public int determineStructureType(String owner, String repo, String sor, String accessToken) throws IOException {
        String url = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/contents/src/batch/" + sor;
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        HttpEntity<?> entity = new HttpEntity<>(headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        JsonNode root = objectMapper.readTree(response.getBody());
        if (root.isArray()) {
            for (JsonNode node : root) {
                if (node.has("name")) {
                    String folderName = node.get("name").asText().toLowerCase();
                    if (EXPECTED_FOLDERS.contains(folderName)) {
                        return 1; // Type 1 structure
                    }
                }
            }
        }
        return 2; // Default to Type 2 structure
    }

    /**
     * Constructs the target file path based on the SOR structure type, file type, and feed name.
     * The returned path is relative to the repository root.
     */
    public String constructTargetPath(String sor, String feedName, String fileType, int structureType) {
        String basePath = "src/batch/" + sor + "/";
        String targetPath;
        if (structureType == 1) {
            // Type 1: file type folders directly under sor.
            switch (fileType.toLowerCase()) {
                case "json":
                    targetPath = basePath + "config/dci/json/" + feedName + ".json";
                    break;
                case "sql":
                    targetPath = basePath + "sql/" + feedName + ".sql";
                    break;
                case "scripts":
                    targetPath = basePath + "scripts/" + feedName + ".ksh";
                    break;
                case "metadata":
                    targetPath = basePath + "metadata/" + feedName + ".txt";
                    break;
                case "hql":
                    targetPath = basePath + "hql/" + feedName + ".hql";
                    break;
                case "ddl":
                    targetPath = basePath + "ddl/" + feedName + ".ddl";
                    break;
                default:
                    targetPath = basePath;
            }
        } else {
            // Type 2: feed folder exists under sor.
            basePath = basePath + feedName + "/";
            switch (fileType.toLowerCase()) {
                case "json":
                    targetPath = basePath + "config/dci/json/" + feedName + ".json";
                    break;
                case "sql":
                    targetPath = basePath + "sql/" + feedName + ".sql";
                    break;
                case "scripts":
                    targetPath = basePath + "scripts/" + feedName + ".ksh";
                    break;
                case "metadata":
                    targetPath = basePath + "metadata/" + feedName + ".txt";
                    break;
                case "hql":
                    targetPath = basePath + "hql/" + feedName + ".hql";
                    break;
                case "ddl":
                    targetPath = basePath + "ddl/" + feedName + ".ddl";
                    break;
                default:
                    targetPath = basePath;
            }
        }
        return targetPath;
    }

    /**
     * Ensures that the folder path exists in the repository.
     * Recursively checks each level and creates any missing folder using the GitHub API.
     * Note: This example uses the default branch ("main") for folder creation; adjust if necessary.
     */
    public void ensureFolderPathExists(String owner, String repo, String folderPath, String accessToken) throws IOException {
        // Split the folderPath and check each folder level.
        // Example folderPath: "src/batch/sor1/config/dci/json"
        String[] parts = folderPath.split("/");
        String currentPath = "";
        for (String part : parts) {
            if (part.isEmpty()) continue;
            currentPath += "/" + part;
            // Remove leading slash for API use.
            String apiPath = currentPath.startsWith("/") ? currentPath.substring(1) : currentPath;
            String url = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/contents/" + apiPath;
            RestTemplate restTemplate = new RestTemplate();
            HttpHeaders headers = buildAuthHeaders(accessToken);
            HttpEntity<?> entity = new HttpEntity<>(headers);
            try {
                restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
                // Folder exists; continue.
            } catch (HttpClientErrorException e) {
                if (e.getStatusCode() == HttpStatus.NOT_FOUND) {
                    // Folder does not exist; create it.
                    String createUrl = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/contents/" + apiPath;
                    // GitHub requires a base64-encoded content; for folders, an empty string is acceptable.
                    String payload = String.format("{\"message\": \"Creating folder %s\", \"content\": \"\", \"branch\": \"main\"}", apiPath);
                    HttpEntity<String> putEntity = new HttpEntity<>(payload, headers);
                    restTemplate.exchange(createUrl, HttpMethod.PUT, putEntity, String.class);
                } else {
                    throw e;
                }
            }
        }
    }

    /**
     * Builds authentication headers for GitHub API requests.
     */
    private HttpHeaders buildAuthHeaders(String accessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "token " + accessToken);
        headers.setAccept(Collections.singletonList(MediaType.parseMediaType("application/vnd.github.v3+json")));
        headers.add("X-REQUEST-ID", UUID.randomUUID().toString());
        headers.add("X-CORRELATION-ID", UUID.randomUUID().toString());
        headers.add("X-CLIENT-ID", "UTCAP");
        return headers;
    }
}









package com.wellsfargo.utcap.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.wellsfargo.utcap.dto.GitOperationRequest;
import com.wellsfargo.utcap.service.PathConstructorService;
import jakarta.servlet.http.HttpSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.util.Collections;
import java.util.UUID;

/**
 * Controller for handling Git operations.
 */
@RestController
@RequestMapping("/ghe")
public class GitOperationsController {

    private static final Logger log = LoggerFactory.getLogger(GitOperationsController.class);
    private static final String GHE_API_BASE = "https://github.wellsfargo.com/api/v3/";
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Autowired
    private PathConstructorService pathConstructorService;

    /**
     * Endpoint to perform Git operations based on the operation type specified in the request.
     *
     * @param request GitOperationRequest payload containing details of the Git operation.
     *                For file operations, request should now include: sor, feedName, fileType.
     * @param session HttpSession to obtain the stored access token.
     * @return ResponseEntity with the result of the operation or an error message.
     */
    @PostMapping("/operation")
    public ResponseEntity<?> performOperation(@RequestBody GitOperationRequest request, HttpSession session) {
        String accessToken = (String) session.getAttribute("GHE_ACCESS_TOKEN");
        if (accessToken == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Not authenticated");
        }

        try {
            String result;
            switch (request.getOperation()) {
                case "createBranch":
                    result = createBranch(accessToken, request);
                    break;
                case "pushFile":
                    // Before pushing, compute the target file path using the PathConstructorService.
                    // Expecting request contains: sor, feedName, fileType.
                    String sor = request.getSor();         // e.g., "sor1"
                    String feedName = request.getFeedName(); // e.g., "feed1"
                    String fileType = request.getFileType(); // e.g., "json", "sql", etc.
                    String owner = request.getOwner();
                    String repo = request.getRepo();

                    // Determine the structure type of the SOR.
                    int structureType = pathConstructorService.determineStructureType(owner, repo, sor, accessToken);
                    // Compute the target file path.
                    String targetPath = pathConstructorService.constructTargetPath(sor, feedName, fileType, structureType);
                    // Ensure that the folder (without the file name) exists.
                    String folderPath = targetPath.substring(0, targetPath.lastIndexOf("/"));
                    pathConstructorService.ensureFolderPathExists(owner, repo, folderPath, accessToken);
                    // Update the request with the computed file path.
                    request.setFilePath(targetPath);
                    log.info("Computed file path: {}", targetPath);
                    result = pushFile(accessToken, request);
                    break;
                case "updateFile":
                    result = updateFile(accessToken, request);
                    break;
                case "addFile":
                    result = addFile(accessToken, request);
                    break;
                case "mergeBranch":
                    result = mergeBranch(accessToken, request);
                    break;
                default:
                    return ResponseEntity.badRequest().body("Invalid operation: " + request.getOperation());
            }
            return ResponseEntity.ok(result);
        } catch (Exception ex) {
            log.error("Operation failed", ex);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Operation failed: " + ex.getMessage());
        }
    }

    /**
     * Creates a new branch in the repository.
     * If the branch already exists, returns a message indicating so.
     */
    private String createBranch(String accessToken, GitOperationRequest request) throws IOException {
        String owner = request.getOwner();
        String repo = request.getRepo();
        String newBranch = request.getNewBranch();

        // Check if branch already exists.
        String branchUrl = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/branches/" + newBranch;
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        HttpEntity<?> getEntity = new HttpEntity<>(headers);
        try {
            ResponseEntity<String> branchResponse = restTemplate.exchange(branchUrl, HttpMethod.GET, getEntity, String.class);
            if (branchResponse.getStatusCode() == HttpStatus.OK) {
                log.info("Branch {} already exists.", newBranch);
                return "Branch " + newBranch + " already exists.";
            }
        } catch (HttpClientErrorException e) {
            if (e.getStatusCode() != HttpStatus.NOT_FOUND) {
                throw e;
            }
            // 404 means branch does not exist; proceed to create.
        }

        // Create branch.
        String defaultBranch = getDefaultBranch(accessToken, owner, repo);
        String baseSha = getBranchSha(accessToken, owner, repo, defaultBranch);

        String url = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/git/refs";
        headers.setContentType(MediaType.APPLICATION_JSON);
        String payload = String.format(
                "{\"ref\": \"refs/heads/%s\", \"sha\": \"%s\"}",
                newBranch, baseSha
        );
        HttpEntity<String> entity = new HttpEntity<>(payload, headers);
        ResponseEntity<String> response = restTemplate.postForEntity(url, entity, String.class);
        log.info("Create branch response: {}", response.getBody());
        return response.getBody();
    }

    /**
     * Unified method to push a file.
     * Checks if the file exists on GitHub (in the specified branch):
     * - If it exists, updates the file.
     * - If not, adds the file.
     */
    private String pushFile(String accessToken, GitOperationRequest request) throws IOException {
        String owner = request.getOwner();
        String repo = request.getRepo();
        String filePath = request.getFilePath();
        // Append the branch query parameter to check in the correct branch.
        String url = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/contents/" + filePath + "?ref=" + request.getNewBranch();
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        HttpEntity<?> entity = new HttpEntity<>(headers);

        try {
            ResponseEntity<String> getResponse = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
            log.info("GET response for file update: {}", getResponse.getBody());
            String existingFileSha = extractShaFromResponse(getResponse.getBody());
            request.setFileSha(existingFileSha);
            log.info("File exists. Proceeding with update.");
            return updateFile(accessToken, request);
        } catch (HttpClientErrorException e) {
            if (e.getStatusCode() == HttpStatus.NOT_FOUND) {
                log.info("File does not exist in branch {}. Proceeding with add.", request.getNewBranch());
                return addFile(accessToken, request);
            } else {
                throw e;
            }
        }
    }

    /**
     * Updates an existing file in the repository.
     * Now includes the branch parameter.
     */
    private String updateFile(String accessToken, GitOperationRequest request) {
        String url = GHE_API_BASE + "/repos/" + request.getOwner() + "/" + request.getRepo()
                + "/contents/" + request.getFilePath();
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        headers.setContentType(MediaType.APPLICATION_JSON);

        String payload = String.format(
                "{\"message\": \"%s\", \"content\": \"%s\", \"sha\": \"%s\", \"branch\": \"%s\"}",
                request.getCommitMessage(), request.getContent(), request.getFileSha(), request.getNewBranch()
        );
        HttpEntity<String> entity = new HttpEntity<>(payload, headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.PUT, entity, String.class);
        log.info("Update file response: {}", response.getBody());
        return response.getBody();
    }

    /**
     * Adds a new file to the repository.
     * Now includes the branch parameter.
     */
    private String addFile(String accessToken, GitOperationRequest request) {
        String url = GHE_API_BASE + "/repos/" + request.getOwner() + "/" + request.getRepo()
                + "/contents/" + request.getFilePath();
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        headers.setContentType(MediaType.APPLICATION_JSON);

        String payload = String.format(
                "{\"message\": \"%s\", \"content\": \"%s\", \"branch\": \"%s\"}",
                request.getCommitMessage(), request.getContent(), request.getNewBranch()
        );
        HttpEntity<String> entity = new HttpEntity<>(payload, headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.PUT, entity, String.class);
        log.info("Add file response: {}", response.getBody());
        return response.getBody();
    }

    /**
     * Merges two branches in the repository.
     */
    private String mergeBranch(String accessToken, GitOperationRequest request) {
        String url = GHE_API_BASE + "/repos/" + request.getOwner() + "/" + request.getRepo() + "/merges";
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        headers.setContentType(MediaType.APPLICATION_JSON);

        String payload = String.format(
                "{\"base\": \"%s\", \"head\": \"%s\", \"commit_message\": \"%s\"}",
                request.getBaseBranch(), request.getHeadBranch(), request.getCommitMessage()
        );
        HttpEntity<String> entity = new HttpEntity<>(payload, headers);
        ResponseEntity<String> response = restTemplate.postForEntity(url, entity, String.class);
        log.info("Merge branch response: {}", response.getBody());
        return response.getBody();
    }

    /**
     * Retrieves the default branch for a given repository.
     */
    private String getDefaultBranch(String accessToken, String owner, String repo) throws IOException {
        String url = GHE_API_BASE + "/repos/" + owner + "/" + repo;
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        HttpEntity<?> entity = new HttpEntity<>(headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        JsonNode root = objectMapper.readTree(response.getBody());
        return root.get("default_branch").asText();
    }

    /**
     * Retrieves the latest commit SHA for a given branch.
     */
    private String getBranchSha(String accessToken, String owner, String repo, String branchName) throws IOException {
        String url = GHE_API_BASE + "/repos/" + owner + "/" + repo + "/branches/" + branchName;
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = buildAuthHeaders(accessToken);
        HttpEntity<?> entity = new HttpEntity<>(headers);
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);
        JsonNode root = objectMapper.readTree(response.getBody());
        return root.get("commit").get("sha").asText();
    }

    /**
     * Extracts the file SHA from a GitHub API response.
     * Checks if the response is an object or an array.
     */
    private String extractShaFromResponse(String responseBody) throws IOException {
        JsonNode root = objectMapper.readTree(responseBody);
        if (root.isArray() && root.size() > 0) {
            return root.get(0).get("sha").asText();
        } else if (root.isObject() && root.has("sha")) {
            return root.get("sha").asText();
        } else {
            log.error("Unable to extract sha from response: {}", responseBody);
            throw new IOException("SHA not found in GitHub response.");
        }
    }

    /**
     * Builds authentication headers for GitHub API requests.
     */
    private HttpHeaders buildAuthHeaders(String accessToken) {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "token " + accessToken);
        headers.setAccept(Collections.singletonList(MediaType.parseMediaType("application/vnd.github.v3+json")));
        headers.add("X-REQUEST-ID", UUID.randomUUID().toString());
        headers.add("X-CORRELATION-ID", UUID.randomUUID().toString());
        headers.add("X-CLIENT-ID", "UTCAP");
        return headers;
    }
}




package com.wellsfargo.utcap.dto;

public class GitOperationRequest {
    // Specifies the Git operation: "createBranch", "updateFile", "addFile", "mergeBranch", "pushFile", etc.
    private String operation;
    private String owner;
    private String repo;
    
    // For createBranch operation
    private String newBranch;
    private String baseSha;
    private String baseBranch;
    
    // For updateFile and addFile operations
    private String filePath;
    private String commitMessage;
    private String content;
    private String fileSha;
    
    // For mergeBranch operation
    private String baseBranchForMerge;
    private String headBranch;
    
    // New fields for dynamic path construction
    private String sor;       // The SOR name (e.g., "sor1")
    private String feedName;  // The feed (table) name
    private String fileType;  // The file type (e.g., "json", "sql", "scripts", "metadata", "hql", "ddl")

    // Getters and setters for all fields

    public String getOperation() {
        return operation;
    }
    public void setOperation(String operation) {
        this.operation = operation;
    }
    
    public String getOwner() {
        return owner;
    }
    public void setOwner(String owner) {
        this.owner = owner;
    }
    
    public String getRepo() {
        return repo;
    }
    public void setRepo(String repo) {
        this.repo = repo;
    }
    
    public String getNewBranch() {
        return newBranch;
    }
    public void setNewBranch(String newBranch) {
        this.newBranch = newBranch;
    }
    
    public String getBaseSha() {
        return baseSha;
    }
    public void setBaseSha(String baseSha) {
        this.baseSha = baseSha;
    }
    
    public String getBaseBranch() {
        return baseBranch;
    }
    public void setBaseBranch(String baseBranch) {
        this.baseBranch = baseBranch;
    }
    
    public String getFilePath() {
        return filePath;
    }
    public void setFilePath(String filePath) {
        this.filePath = filePath;
    }
    
    public String getCommitMessage() {
        return commitMessage;
    }
    public void setCommitMessage(String commitMessage) {
        this.commitMessage = commitMessage;
    }
    
    public String getContent() {
        return content;
    }
    public void setContent(String content) {
        this.content = content;
    }
    
    public String getFileSha() {
        return fileSha;
    }
    public void setFileSha(String fileSha) {
        this.fileSha = fileSha;
    }
    
    public String getBaseBranchForMerge() {
        return baseBranchForMerge;
    }
    public void setBaseBranchForMerge(String baseBranchForMerge) {
        this.baseBranchForMerge = baseBranchForMerge;
    }
    
    public String getHeadBranch() {
        return headBranch;
    }
    public void setHeadBranch(String headBranch) {
        this.headBranch = headBranch;
    }
    
    public String getSor() {
        return sor;
    }
    public void setSor(String sor) {
        this.sor = sor;
    }
    
    public String getFeedName() {
        return feedName;
    }
    public void setFeedName(String feedName) {
        this.feedName = feedName;
    }
    
    public String getFileType() {
        return fileType;
    }
    public void setFileType(String fileType) {
        this.fileType = fileType;
    }
}
