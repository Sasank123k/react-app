Below is one way you could refactor the function to lower its cognitive complexity. The idea is to use functional programming methods—specifically, replacing the explicit loops and nested ifs with JavaScript’s array and object iteration methods (like `Object.entries` and `Array.every`). This can help flatten the nested conditions and make the logic easier to follow.

Below is a refactored version of your `validateJobData` function:

```jsx
const validateJobData = (data) => {
  // Base case: if it's not an object (or it's null), return whether it's non-empty.
  if (data === null || typeof data !== "object") {
    return data !== "";
  }
  
  // Check every key/value pair in the object.
  return Object.entries(data).every(([key, value]) => {
    // For 'properties', when it's an array, validate all its children recursively.
    if (key === "properties" && Array.isArray(value)) {
      return value.every(validateJobData);
    }
    // If the value is an object, recursively validate it.
    if (typeof value === "object") {
      return validateJobData(value);
    }
    // Otherwise, the value must be non-empty.
    return value !== "";
  });
};
```

### Explanation

1. **Base Case First:**  
   The function immediately returns the check for non-empty if the data isn’t an object (or is `null`). This helps avoid extra nesting later.

2. **Using `Object.entries`:**  
   Instead of iterating with a `for…in` loop and checking with `hasOwnProperty`, we iterate over the key-value pairs directly using `Object.entries(data)`. This avoids an extra level of nesting and makes the code easier to read.

3. **Using `Array.every`:**  
   The `every` method tests whether all elements pass the condition. As soon as one fails the check, it returns `false` (which mirrors your early return pattern).

4. **Separate Cases for 'properties':**  
   The special case where the key is `"properties"` and its value is an array is handled first. The use of `every` here minimizes additional nesting.

5. **Recursion for Nested Objects:**  
   When a value is an object (but not the special `"properties"` array), the function recurses. This handles nested objects uniformly.

This refactoring should lower the cognitive complexity to meet the SonarCube criteria while maintaining the same functionality. Be sure to test thoroughly to ensure that the behavior is as expected.
