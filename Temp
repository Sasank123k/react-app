aBelow is an end‐to‐end example of how you can set up your JIL metadata storage using Spring Boot with MongoDB. In Spring Data MongoDB the collection is automatically created on first write if it doesn’t exist, so you don’t have to create it manually in Mongo Compass.

Below are the complete code examples for:

1. Model (JilMetadata.java)


2. Repository (JilMetadataRepository.java)


3. Service (JilMetadataService.java)


4. Controller (JilMetadataController.java)



You can adjust the package names as needed. In this example, we’ll assume the base package is com.example.jil.


---

1. Model – JilMetadata.java

This model represents a document in the jilMetadata collection.
We’re using org.bson.Document to store the JSON schema.

package com.example.jil.model;

import org.bson.Document;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document as MongoDocument;

@MongoDocument(collection = "jilMetadata")
public class JilMetadata {

    @Id
    private String id;

    // A descriptor or name for the metadata document, e.g., "JIL Editor v1"
    private String document;

    // The actual metadata JSON schema stored as a BSON Document.
    private Document metaData;

    // Constructors
    public JilMetadata() {
    }

    public JilMetadata(String document, Document metaData) {
        this.document = document;
        this.metaData = metaData;
    }

    // Getters and Setters

    public String getId() {
        return id;
    }

    public void setId(String id) {
       this.id = id;
    }

    public String getDocument() {
        return document;
    }

    public void setDocument(String document) {
        this.document = document;
    }

    public Document getMetaData() {
        return metaData;
    }

    public void setMetaData(Document metaData) {
        this.metaData = metaData;
    }
}


---

2. Repository – JilMetadataRepository.java

This interface extends MongoRepository to provide basic CRUD operations and custom query methods if needed.

package com.example.jil.repository;

import org.springframework.data.mongodb.repository.MongoRepository;
import com.example.jil.model.JilMetadata;
import java.util.Optional;

public interface JilMetadataRepository extends MongoRepository<JilMetadata, String> {

    // Example of a custom query to find by document name
    Optional<JilMetadata> findByDocument(String document);
}


---

3. Service – JilMetadataService.java

The service layer encapsulates business logic and calls repository methods. It provides methods for creating, reading, updating, and deleting metadata.

package com.example.jil.service;

import com.example.jil.model.JilMetadata;
import com.example.jil.repository.JilMetadataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class JilMetadataService {

    private final JilMetadataRepository repository;

    @Autowired
    public JilMetadataService(JilMetadataRepository repository) {
        this.repository = repository;
    }

    // Create new metadata
    public JilMetadata createMetadata(JilMetadata metadata) {
        return repository.save(metadata);
    }

    // Retrieve all metadata documents
    public List<JilMetadata> getAllMetadata() {
        return repository.findAll();
    }

    // Retrieve metadata by id
    public Optional<JilMetadata> getMetadataById(String id) {
        return repository.findById(id);
    }

    // Retrieve metadata by document name
    public Optional<JilMetadata> getMetadataByDocument(String document) {
        return repository.findByDocument(document);
    }

    // Update metadata by id
    public JilMetadata updateMetadata(String id, JilMetadata newMetadata) {
        return repository.findById(id)
                .map(existing -> {
                    existing.setDocument(newMetadata.getDocument());
                    existing.setMetaData(newMetadata.getMetaData());
                    return repository.save(existing);
                })
                .orElseThrow(() -> new RuntimeException("Metadata not found with id: " + id));
    }

    // Delete metadata by id
    public void deleteMetadata(String id) {
        repository.deleteById(id);
    }
}


---

4. Controller – JilMetadataController.java

The REST controller exposes endpoints for the frontend (or other services) to interact with your JIL metadata.
Endpoints include GET (all and by id), POST (create), PUT (update), and DELETE (delete).

package com.example.jil.controller;

import com.example.jil.model.JilMetadata;
import com.example.jil.service.JilMetadataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/jilMetadata")
public class JilMetadataController {

    private final JilMetadataService service;

    @Autowired
    public JilMetadataController(JilMetadataService service) {
        this.service = service;
    }

    // Get all metadata documents
    @GetMapping
    public ResponseEntity<List<JilMetadata>> getAllMetadata() {
        List<JilMetadata> metadataList = service.getAllMetadata();
        return ResponseEntity.ok(metadataList);
    }

    // Get metadata by id
    @GetMapping("/{id}")
    public ResponseEntity<JilMetadata> getMetadataById(@PathVariable String id) {
        Optional<JilMetadata> metadata = service.getMetadataById(id);
        return metadata.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Create new metadata
    @PostMapping
    public ResponseEntity<JilMetadata> createMetadata(@RequestBody JilMetadata metadata) {
        JilMetadata created = service.createMetadata(metadata);
        return ResponseEntity.ok(created);
    }

    // Update existing metadata
    @PutMapping("/{id}")
    public ResponseEntity<JilMetadata> updateMetadata(@PathVariable String id, @RequestBody JilMetadata metadata) {
        try {
            JilMetadata updated = service.updateMetadata(id, metadata);
            return ResponseEntity.ok(updated);
        } catch (RuntimeException ex) {
            return ResponseEntity.notFound().build();
        }
    }

    // Delete metadata by id
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMetadata(@PathVariable String id) {
        service.deleteMetadata(id);
        return ResponseEntity.noContent().build();
    }
}


---

Summary of Steps

1. Dependencies & Configuration:

Ensure you have the Spring Data MongoDB dependency.

Configure your MongoDB connection in application.properties (or application.yml).



2. Create the Model:

The JilMetadata class represents your metadata document.



3. Create the Repository:

The JilMetadataRepository interface provides CRUD methods.



4. Create the Service:

The JilMetadataService class contains methods for creating, reading, updating, and deleting metadata.



5. Create the Controller:

The JilMetadataController class exposes REST endpoints to interact with the metadata.



6. Automatic Collection Creation:

When you first save a document using the repository, Spring Data MongoDB will automatically create the jilMetadata collection if it does not already exist.




This complete setup will allow you to store and manage your JIL metadata in MongoDB via your Spring Boot application. If you need additional customizations or run into any issues, feel free to ask!

