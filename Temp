from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.shapes import MSO_SHAPE, MSO_CONNECTOR
from pptx.enum.dml import MSO_ARROWHEAD

# Create a new presentation
prs = Presentation()

# Helper function to add a text box with custom formatting
def add_textbox(slide, left, top, width, height, text, font_size=16):
    textbox = slide.shapes.add_textbox(left, top, width, height)
    tf = textbox.text_frame
    tf.text = text
    for paragraph in tf.paragraphs:
        for run in paragraph.runs:
            run.font.size = Pt(font_size)
    return textbox

# Helper function to add an arrow connector with an arrow head
def add_arrow_connector(slide, start_x, start_y, end_x, end_y):
    connector = slide.shapes.add_connector(MSO_CONNECTOR.STRAIGHT, start_x, start_y, end_x - start_x, end_y - start_y)
    # Set an arrow head at the end of the connector
    connector.line.end_arrowhead.style = MSO_ARROWHEAD.TRIANGLE
    return connector

# ----------------------
# Slide 1: Title Slide
slide = prs.slides.add_slide(prs.slide_layouts[0])
slide.shapes.title.text = "Integration Options for GitHub"
subtitle = slide.placeholders[1]
subtitle.text = "Detailed Analysis of GitHub Integration Approaches"

# ----------------------
# Slide 2: Agenda
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "Agenda"
agenda_text = (
    "• Use Case Overview\n"
    "• Detailed Integration Flow Diagram\n"
    "• Personal Access Tokens (PATs)\n"
    "• OAuth Apps\n"
    "• GitHub Apps\n"
    "• Git CLI\n"
    "• Conclusion & Recommendations\n"
    "• Q&A"
)
slide.placeholders[1].text = agenda_text

# ----------------------
# Slide 3: Use Case Overview
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "Use Case Overview"
use_case_text = (
    "• Users log in to our website\n"
    "• They generate JSON configuration files\n"
    "• The file is pushed directly to the user’s GitHub repository\n"
    "• No repository cloning is involved\n"
    "• Pushes occur using the user’s account credentials"
)
slide.placeholders[1].text = use_case_text

# ----------------------
# Slide 4: Detailed Integration Flow Diagram
# Create a blank slide for a custom flow diagram
slide = prs.slides.add_slide(prs.slide_layouts[6])
add_textbox(slide, Inches(0.5), Inches(0.3), Inches(9), Inches(0.5),
            "Detailed Integration Flow Diagram", font_size=24)

# Vertical flow nodes (centered)
node_width, node_height = Inches(2), Inches(0.75)
center_left = Inches(4)

user_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, center_left, Inches(1), node_width, node_height)
user_node.text = "User Logs In"

auth_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, center_left, Inches(2), node_width, node_height)
auth_node.text = "Authentication"

generate_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, center_left, Inches(3), node_width, node_height)
generate_node.text = "Generate JSON Config"

select_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, center_left, Inches(4), node_width, node_height)
select_node.text = "Select Integration Option"

# Branching horizontal nodes for integration options
# Adjust left positions so all nodes fit on the slide (assumes slide width ~10 inches)
pat_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, Inches(0.5), Inches(5), node_width, node_height)
pat_node.text = "PATs\n• Simple\n• Manual token mgmt"

oauth_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, Inches(3), Inches(5), node_width, node_height)
oauth_node.text = "OAuth Apps\n• Secure\n• Token refresh"

github_apps_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, Inches(5.5), Inches(5), node_width, node_height)
github_apps_node.text = "GitHub Apps\n• Granular\n• Audit logs"

git_cli_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, Inches(8), Inches(5), node_width, node_height)
git_cli_node.text = "Git CLI\n• Full git\n• Cloning req"

# Vertical nodes after branch
push_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, center_left, Inches(6), node_width, node_height)
push_node.text = "Push Operation Initiated"

repo_node = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, center_left, Inches(7), node_width, node_height)
repo_node.text = "GitHub Repository Updated"

# Connect vertical nodes
for shape_from, shape_to in [(user_node, auth_node), (auth_node, generate_node), (generate_node, select_node)]:
    start_x = shape_from.left + shape_from.width/2
    start_y = shape_from.top + shape_from.height
    end_x = shape_to.left + shape_to.width/2
    end_y = shape_to.top
    add_arrow_connector(slide, start_x, start_y, end_x, end_y)

# Connect "Select Integration Option" to each integration option node (branching downward)
for option_node in [pat_node, oauth_node, github_apps_node, git_cli_node]:
    start_x = select_node.left + select_node.width/2
    start_y = select_node.top + select_node.height
    end_x = option_node.left + option_node.width/2
    end_y = option_node.top
    add_arrow_connector(slide, start_x, start_y, end_x, end_y)

# Connect each integration option node to the Push Operation node
for option_node in [pat_node, oauth_node, github_apps_node, git_cli_node]:
    start_x = option_node.left + option_node.width/2
    start_y = option_node.top + option_node.height
    end_x = push_node.left + push_node.width/2
    end_y = push_node.top
    add_arrow_connector(slide, start_x, start_y, end_x, end_y)

# Connect Push Operation to GitHub Repository Updated
start_x = push_node.left + push_node.width/2
start_y = push_node.top + push_node.height
end_x = repo_node.left + repo_node.width/2
end_y = repo_node.top
add_arrow_connector(slide, start_x, start_y, end_x, end_y)

# ----------------------
# Slide 5: Personal Access Tokens (PATs)
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "Personal Access Tokens (PATs)"
pat_text = (
    "How It Works:\n"
    "• User generates a PAT with necessary scopes (e.g., repo, user) from GitHub.\n"
    "• The website uses this token to directly call GitHub’s API and push the JSON file.\n\n"
    "Pros:\n"
    "• Directly tied to the user’s account.\n"
    "• Simple, REST-based implementation without a complex flow.\n\n"
    "Cons:\n"
    "• Security risk if the token is exposed.\n"
    "• Requires users to manually generate and manage tokens.\n"
    "• Limited control over token lifecycle and permissions."
)
add_textbox(slide, Inches(0.5), Inches(1.5), Inches(9), Inches(4), pat_text, font_size=16)

# ----------------------
# Slide 6: OAuth Apps
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "OAuth Apps"
oauth_text = (
    "How It Works:\n"
    "• Website initiates an OAuth flow by redirecting the user to GitHub’s consent screen.\n"
    "• User grants permission, and GitHub returns an access token to the website.\n"
    "• The token is used to push the JSON file directly from the user’s account.\n\n"
    "Pros:\n"
    "• Secure, standard authorization with explicit user consent.\n"
    "• Supports token refresh and revocation for improved lifecycle management.\n"
    "• Scopes can be limited to specific actions.\n\n"
    "Cons:\n"
    "• More complex implementation (managing redirects, token exchange, expiry).\n"
    "• Potential interruptions if tokens expire and require reauthorization."
)
add_textbox(slide, Inches(0.5), Inches(1.5), Inches(9), Inches(4), oauth_text, font_size=16)

# ----------------------
# Slide 7: GitHub Apps
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "GitHub Apps"
github_apps_text = (
    "How It Works:\n"
    "• User installs the GitHub App on their account or organization.\n"
    "• The app issues installation tokens with fine-grained permissions.\n"
    "• These tokens allow the website to push the JSON file via the GitHub API.\n\n"
    "Pros:\n"
    "• Provides granular permission control and enhanced security.\n"
    "• Detailed audit logs for tracking actions.\n"
    "• Separation of duties between user and app.\n\n"
    "Cons:\n"
    "• Requires users to install the app, adding onboarding friction.\n"
    "• Actions may be recorded under the app’s identity rather than the user’s."
)
add_textbox(slide, Inches(0.5), Inches(1.5), Inches(9), Inches(4), github_apps_text, font_size=16)

# ----------------------
# Slide 8: Git CLI
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "Git CLI"
git_cli_text = (
    "How It Works:\n"
    "• Website utilizes Git command-line operations (clone, commit, push) to update repositories.\n"
    "• Typically requires a temporary clone of the repository on the server.\n\n"
    "Pros:\n"
    "• Full control over Git operations and commit history.\n"
    "• Familiar process for developers.\n\n"
    "Cons:\n"
    "• Requires repository cloning, which contradicts the direct push requirement.\n"
    "• Resource-intensive with complex error handling and merge conflict management."
)
add_textbox(slide, Inches(0.5), Inches(1.5), Inches(9), Inches(4), git_cli_text, font_size=16)

# ----------------------
# Slide 9: Conclusion & Recommendations
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "Conclusion & Recommendations"
conclusion_text = (
    "• PATs and OAuth Apps best meet the direct push requirement.\n"
    "• OAuth Apps offer improved security and token management over PATs.\n"
    "• GitHub Apps provide granular control and auditability but add onboarding complexity.\n"
    "• Git CLI is not recommended due to its cloning requirement and resource overhead.\n\n"
    "Recommendation:\n"
    "Choose the approach that best aligns with your security policies, user experience needs, and company API restrictions."
)
add_textbox(slide, Inches(0.5), Inches(1.5), Inches(9), Inches(4), conclusion_text, font_size=16)

# ----------------------
# Slide 10: Q&A
slide = prs.slides.add_slide(prs.slide_layouts[1])
slide.shapes.title.text = "Q&A"
add_textbox(slide, Inches(0.5), Inches(1.5), Inches(9), Inches(2), "Questions & Discussion", font_size=20)

# Save the presentation to a file
prs.save("github_integration_options_detailed.pptx")
print("Presentation created and saved as 'github_integration_options_detailed.pptx'")
