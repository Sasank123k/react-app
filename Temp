aBelow are the updated, complete files using your package structure (com.wellsfargo.utcap.*). In Java you can’t alias imports, so we’ll use the fully qualified annotation for Spring’s @Document to avoid conflicts with org.bson.Document.


---

1. Model – JilMetadata.java

Location: com/wellsfargo/utcap/model/JilMetadata.java

package com.wellsfargo.utcap.model;

import org.bson.Document;
import org.springframework.data.annotation.Id;

// Use fully qualified name for the annotation to avoid conflict with org.bson.Document.
@org.springframework.data.mongodb.core.mapping.Document(collection = "jilMetadata")
public class JilMetadata {

    @Id
    private String id;
    
    // A descriptor for this metadata document (e.g., "JIL Editor v1")
    private String document;
    
    // The actual metadata JSON schema stored as a BSON Document.
    private Document metaData;

    // Constructors
    public JilMetadata() {
    }

    public JilMetadata(String document, Document metaData) {
        this.document = document;
        this.metaData = metaData;
    }

    // Getters and Setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
       this.id = id;
    }

    public String getDocument() {
        return document;
    }

    public void setDocument(String document) {
        this.document = document;
    }

    public Document getMetaData() {
        return metaData;
    }

    public void setMetaData(Document metaData) {
        this.metaData = metaData;
    }
}


---

2. Repository – JilMetadataRepository.java

Location: com/wellsfargo/utcap/repository/JilMetadataRepository.java

package com.wellsfargo.utcap.repository;

import com.wellsfargo.utcap.model.JilMetadata;
import org.springframework.data.mongodb.repository.MongoRepository;
import java.util.Optional;

public interface JilMetadataRepository extends MongoRepository<JilMetadata, String> {

    // Custom query method to find by document name
    Optional<JilMetadata> findByDocument(String document);
}


---

3. Service – JilMetadataService.java

Location: com/wellsfargo/utcap/service/JilMetadataService.java

package com.wellsfargo.utcap.service;

import com.wellsfargo.utcap.model.JilMetadata;
import com.wellsfargo.utcap.repository.JilMetadataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class JilMetadataService {

    private final JilMetadataRepository repository;

    @Autowired
    public JilMetadataService(JilMetadataRepository repository) {
        this.repository = repository;
    }

    // Create new metadata
    public JilMetadata createMetadata(JilMetadata metadata) {
        return repository.save(metadata);
    }

    // Retrieve all metadata documents
    public List<JilMetadata> getAllMetadata() {
        return repository.findAll();
    }

    // Retrieve metadata by id
    public Optional<JilMetadata> getMetadataById(String id) {
        return repository.findById(id);
    }

    // Retrieve metadata by document name
    public Optional<JilMetadata> getMetadataByDocument(String document) {
        return repository.findByDocument(document);
    }

    // Update metadata by id
    public JilMetadata updateMetadata(String id, JilMetadata newMetadata) {
        return repository.findById(id)
                .map(existing -> {
                    existing.setDocument(newMetadata.getDocument());
                    existing.setMetaData(newMetadata.getMetaData());
                    return repository.save(existing);
                })
                .orElseThrow(() -> new RuntimeException("Metadata not found with id: " + id));
    }

    // Delete metadata by id
    public void deleteMetadata(String id) {
        repository.deleteById(id);
    }
}


---

4. Controller – JilMetadataController.java

Location: com/wellsfargo/utcap/controller/JilMetadataController.java

package com.wellsfargo.utcap.controller;

import com.wellsfargo.utcap.model.JilMetadata;
import com.wellsfargo.utcap.service.JilMetadataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/jilMetadata")
public class JilMetadataController {

    private final JilMetadataService service;

    @Autowired
    public JilMetadataController(JilMetadataService service) {
        this.service = service;
    }

    // Get all metadata documents
    @GetMapping
    public ResponseEntity<List<JilMetadata>> getAllMetadata() {
        List<JilMetadata> metadataList = service.getAllMetadata();
        return ResponseEntity.ok(metadataList);
    }

    // Get metadata by id
    @GetMapping("/{id}")
    public ResponseEntity<JilMetadata> getMetadataById(@PathVariable String id) {
        Optional<JilMetadata> metadata = service.getMetadataById(id);
        return metadata.map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // Create new metadata
    @PostMapping
    public ResponseEntity<JilMetadata> createMetadata(@RequestBody JilMetadata metadata) {
        JilMetadata created = service.createMetadata(metadata);
        return ResponseEntity.ok(created);
    }

    // Update existing metadata
    @PutMapping("/{id}")
    public ResponseEntity<JilMetadata> updateMetadata(@PathVariable String id, @RequestBody JilMetadata metadata) {
        try {
            JilMetadata updated = service.updateMetadata(id, metadata);
            return ResponseEntity.ok(updated);
        } catch (RuntimeException ex) {
            return ResponseEntity.notFound().build();
        }
    }

    // Delete metadata by id
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMetadata(@PathVariable String id) {
        service.deleteMetadata(id);
        return ResponseEntity.noContent().build();
    }
}


---

Additional Notes

Automatic Collection Creation:
When you first save a document via the repository, Spring Data MongoDB will automatically create the jilMetadata collection if it does not already exist.

Package Structure:
Ensure that your project’s directory structure reflects the package names:

Model: com/wellsfargo/utcap/model

Repository: com/wellsfargo/utcap/repository

Service: com/wellsfargo/utcap/service

Controller: com/wellsfargo/utcap/controller


MongoDB Configuration:
In your application.properties (or application.yml), configure your MongoDB URI, for example:

spring.data.mongodb.uri=mongodb://localhost:27017/yourDatabaseName


With these files in place, you’ll have a full CRUD REST API for storing and managing your JIL metadata in the MongoDB collection named jilMetadata. Let me know if you need further adjustments or have any questions!

