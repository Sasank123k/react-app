import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { generateSearHeader } from '@wf/react-library';
import { useAppGlobalState } from '../../util/Constant';

const MICRO_SERVICE_URL = 'your-microservice-url-here'; // Replace with your backend URL

const GitOperationForm = () => {
  const appGlobalState = useAppGlobalState();

  // For repository selection (non-manual)
  const [repositories, setRepositories] = useState([]);
  const [selectedRepo, setSelectedRepo] = useState(null);
  // For branch selection â€“ now expecting objects with { name, commitSha }
  const [branches, setBranches] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState('');
  // Base commit SHA will now be set automatically when a branch is selected
  const [baseSha, setBaseSha] = useState('');

  // Option to manually enter repository details
  const [manualRepo, setManualRepo] = useState(false);
  const [manualOwner, setManualOwner] = useState('');
  const [manualRepoName, setManualRepoName] = useState('');
  // For manual entry, we still allow entering branch and base SHA manually
  const [manualBaseBranch, setManualBaseBranch] = useState('');
  const [manualBaseSha, setManualBaseSha] = useState('');

  // Git operation details (applies in both cases)
  const [newBranchName, setNewBranchName] = useState('');
  const [filePath, setFilePath] = useState('');
  const [commitMessage, setCommitMessage] = useState('');
  const [fileContent, setFileContent] = useState('');

  // Loading and messaging states
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Fetch repositories if not using manual entry
  useEffect(() => {
    if (!manualRepo) {
      axios.get(`${MICRO_SERVICE_URL}/ghe/repositories`, {
        headers: generateSearHeader(appGlobalState),
        withCredentials: true,
      })
      .then(response => {
        setRepositories(response.data);
      })
      .catch(err => {
        setError(err.response ? err.response.data : err.message);
      });
    }
  }, [manualRepo, appGlobalState]);

  // Fetch branches when a repository is selected (only if not manual)
  useEffect(() => {
    if (!manualRepo && selectedRepo) {
      axios.get(`${MICRO_SERVICE_URL}/ghe/branches`, {
        params: {
          owner: selectedRepo.owner,
          repo: selectedRepo.name,
        },
        headers: generateSearHeader(appGlobalState),
        withCredentials: true,
      })
      .then(response => {
        // Expecting response.data to be an array of branch objects: { name, commitSha }
        setBranches(response.data);
      })
      .catch(err => {
        setError(err.response ? err.response.data : err.message);
      });
    }
  }, [selectedRepo, manualRepo, appGlobalState]);

  // Handler for repository dropdown change
  const handleRepoChange = (e) => {
    const repoName = e.target.value;
    const repo = repositories.find((r) => r.name === repoName);
    setSelectedRepo(repo);
    setSelectedBranch('');
    setBranches([]);
    setBaseSha(''); // clear previous base SHA
  };

  // Handler for branch dropdown change; now also auto-set the base commit SHA
  const handleBranchChange = (e) => {
    const branchName = e.target.value;
    setSelectedBranch(branchName);
    // Find the branch object and set its commitSha as baseSha
    const branchObj = branches.find(b => b.name === branchName);
    if (branchObj && branchObj.commitSha) {
      setBaseSha(branchObj.commitSha);
    } else {
      setBaseSha('');
    }
  };

  // Submit handler performing sequential operations: create branch then push file
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setLoading(true);

    // Determine repository details based on manual toggle
    let owner, repoName, baseBranchName, baseCommitSha;
    if (manualRepo) {
      owner = manualOwner;
      repoName = manualRepoName;
      baseBranchName = manualBaseBranch;
      baseCommitSha = manualBaseSha;
    } else {
      if (!selectedRepo || !selectedBranch) {
        setError('Please select a repository and branch.');
        setLoading(false);
        return;
      }
      owner = selectedRepo.owner;
      repoName = selectedRepo.name;
      baseBranchName = selectedBranch;
      baseCommitSha = baseSha;
    }

    // First, create a new branch using the provided new branch name and base commit SHA.
    try {
      const createBranchPayload = {
        operation: 'createBranch',
        owner: owner,
        repo: repoName,
        newBranch: newBranchName,
        baseSha: baseCommitSha,
      };
      
      const createBranchResponse = await axios.post(
        `${MICRO_SERVICE_URL}/ghe/operation`,
        createBranchPayload,
        {
          headers: generateSearHeader(appGlobalState),
          withCredentials: true,
        }
      );
      
      console.log('Create Branch Response:', createBranchResponse.data);
    } catch (err) {
      setError('Error creating branch: ' + (err.response ? err.response.data : err.message));
      setLoading(false);
      return;
    }

    // Next, push the file (add file) to the new branch.
    try {
      const addFilePayload = {
        operation: 'addFile',
        owner: owner,
        repo: repoName,
        filePath: filePath,
        commitMessage: commitMessage,
        content: fileContent,
        // fileSha is not required for adding a new file
      };
      
      const addFileResponse = await axios.post(
        `${MICRO_SERVICE_URL}/ghe/operation`,
        addFilePayload,
        {
          headers: generateSearHeader(appGlobalState),
          withCredentials: true,
        }
      );
      
      console.log('Add File Response:', addFileResponse.data);
      setSuccess('Git operations completed successfully.');
    } catch (err) {
      setError('Error pushing file: ' + (err.response ? err.response.data : err.message));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="git-operation-form">
      <h2>Perform Git Operation</h2>
      {error && <div className="error-msg">{error}</div>}
      {success && <div className="success-msg">{success}</div>}
      <form onSubmit={handleSubmit}>
        <div>
          <label>
            <input
              type="checkbox"
              checked={manualRepo}
              onChange={(e) => setManualRepo(e.target.checked)}
            />
            Enter repository details manually
          </label>
        </div>

        {!manualRepo ? (
          <div>
            <div>
              <label>Repository:</label>
              <select value={selectedRepo ? selectedRepo.name : ''} onChange={handleRepoChange}>
                <option value="">-- Select Repository --</option>
                {repositories.map((repo) => (
                  <option key={repo.name} value={repo.name}>
                    {repo.name} ({repo.owner})
                  </option>
                ))}
              </select>
            </div>
            {selectedRepo && branches.length > 0 && (
              <div>
                <label>Base Branch:</label>
                <select value={selectedBranch} onChange={handleBranchChange}>
                  <option value="">-- Select Branch --</option>
                  {branches.map((branch) => (
                    <option key={branch.name} value={branch.name}>
                      {branch.name}
                    </option>
                  ))}
                </select>
              </div>
            )}
            {selectedBranch && baseSha && (
              <div>
                <strong>Base Commit SHA:</strong> {baseSha}
              </div>
            )}
          </div>
        ) : (
          <div>
            <div>
              <label>Repository Owner:</label>
              <input
                type="text"
                value={manualOwner}
                onChange={(e) => setManualOwner(e.target.value)}
                placeholder="Enter owner"
              />
            </div>
            <div>
              <label>Repository Name:</label>
              <input
                type="text"
                value={manualRepoName}
                onChange={(e) => setManualRepoName(e.target.value)}
                placeholder="Enter repository name"
              />
            </div>
            <div>
              <label>Base Branch:</label>
              <input
                type="text"
                value={manualBaseBranch}
                onChange={(e) => setManualBaseBranch(e.target.value)}
                placeholder="Enter base branch name"
              />
            </div>
            <div>
              <label>Base Commit SHA:</label>
              <input
                type="text"
                value={manualBaseSha}
                onChange={(e) => setManualBaseSha(e.target.value)}
                placeholder="Enter base commit SHA"
              />
            </div>
          </div>
        )}

        <div>
          <label>New Branch Name:</label>
          <input
            type="text"
            value={newBranchName}
            onChange={(e) => setNewBranchName(e.target.value)}
            placeholder="Enter new branch name"
          />
        </div>
        <div>
          <label>File Path:</label>
          <input
            type="text"
            value={filePath}
            onChange={(e) => setFilePath(e.target.value)}
            placeholder="e.g., path/to/file.json"
          />
        </div>
        <div>
          <label>Commit Message:</label>
          <input
            type="text"
            value={commitMessage}
            onChange={(e) => setCommitMessage(e.target.value)}
            placeholder="Enter commit message"
          />
        </div>
        <div>
          <label>File Content (Base64 Encoded):</label>
          <textarea
            value={fileContent}
            onChange={(e) => setFileContent(e.target.value)}
            placeholder="Enter file content"
          />
        </div>
        <div>
          <button type="submit" disabled={loading}>
            {loading ? 'Processing...' : 'Submit Git Operation'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default GitOperationForm;
