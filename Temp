To split each line by the "=" character (so that everything left of "=" becomes the key and everything right becomes the value), you can update your helper functions. For example, modify your parsing function as follows:

```js
// Helper to parse a raw properties string into an array of key-value objects using "=" as separator.
function parsePropertiesString(str) {
  if (!str) return [];
  const lines = str.split("\n");
  const pairs = lines.map(line => {
    const equalIndex = line.indexOf("=");
    if (equalIndex !== -1) {
      const key = line.slice(0, equalIndex).trim();
      const value = line.slice(equalIndex + 1).trim();
      return { key, value };
    } else {
      // If no "=" found, treat the whole line as key and leave value empty.
      return { key: line.trim(), value: "" };
    }
  });
  return pairs;
}

// Helper to convert an array of key-value pairs back to a properties string using "=".
function propertiesArrayToString(pairs) {
  return pairs.map(pair => `${pair.key}=${pair.value}`).join("\n");
}
```

### How It Works:
- **parsePropertiesString:**  
  - Splits the input text by newline.
  - For each line, it looks for the first occurrence of `"="`.
  - If found, it extracts everything before as the key and everything after as the value.
  - If no "=" is found, the entire line is treated as the key and the value is set to an empty string.

- **propertiesArrayToString:**  
  - Converts each keyâ€“value object back into a line formatted as `key=value`.
  - Joins all lines with newline characters.

### Updated Code in Context

Below is the updated `PropertiesEditor.jsx` file that uses these helper functions:

```jsx
// PropertiesEditor.jsx
import React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import { useNavigate, useLocation } from "react-router-dom";
import { useAppGlobalState } from "@wf/react-library";
import { MICROSERVICE_URL } from "../../../constant";
import { generateSearchHeader } from "../../../Authentication";
import IngressNavigation from "../../Workflow/IngressNavigation";
import DiaasButton from "../../../components/DiaasButton";
import "./PropertiesEditor.css";
import {
  getPropertiesTemplate,
  getRequirementDetails,
  createCMPPropFile,
} from "./propertiesActions";
import KeyValuePair from "./KeyValuePair";

// Updated helper to parse a raw properties string using "=" as separator.
function parsePropertiesString(str) {
  if (!str) return [];
  const lines = str.split("\n");
  const pairs = lines.map(line => {
    const equalIndex = line.indexOf("=");
    if (equalIndex !== -1) {
      const key = line.slice(0, equalIndex).trim();
      const value = line.slice(equalIndex + 1).trim();
      return { key, value };
    } else {
      return { key: line.trim(), value: "" };
    }
  });
  return pairs;
}

// Updated helper to convert an array of key-value pairs back to a properties string.
function propertiesArrayToString(pairs) {
  return pairs.map(pair => `${pair.key}=${pair.value}`).join("\n");
}

export default function PropertiesEditor() {
  const appGlobalState = useAppGlobalState();
  const [fileName, setFileName] = useState("");
  const [pairs, setPairs] = useState([]); // Array of { key, value }
  const [jiraKey, setJiraKey] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState(null);
  const [previewText, setPreviewText] = useState("");

  const location = useLocation();
  const navigate = useNavigate();

  // Memoize location.state so that the effect doesn't run repeatedly.
  const stableLocationState = useMemo(() => location.state, [location.state]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // 1. Get the default properties template.
        const templateResponse = await getPropertiesTemplate(appGlobalState);
        console.log("Template Response Data:", templateResponse);
        if (
          templateResponse &&
          templateResponse.templateObjList &&
          templateResponse.templateObjList.length > 0
        ) {
          const templateStr = templateResponse.templateObjList[0].json;
          const parsedPairs = parsePropertiesString(templateStr);
          setPairs(parsedPairs);
        } else {
          throw new Error("No template object found in the response");
        }

        // 2. Get requirement details using stableLocationState.
        const reqResponse = await getRequirementDetails(stableLocationState, appGlobalState);
        console.log("Requirement Response Data:", reqResponse.data);
        if (reqResponse && reqResponse.data && reqResponse.data.length > 0) {
          setFileName(reqResponse.data[0].tableName);
          setJiraKey(reqResponse.data[0].requirementId);
        } else {
          throw new Error("No requirement details found");
        }
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [stableLocationState, appGlobalState]);

  // Update composite formData and live preview whenever jiraKey, fileName, or pairs change.
  useEffect(() => {
    const parameters = propertiesArrayToString(pairs);
    setFormData({
      requirementId: jiraKey,
      parameters,
      fileName,
    });
    setPreviewText(parameters);
  }, [jiraKey, fileName, pairs]);

  // Handler for updating a key-value pair.
  const handlePairChange = (index, newPair) => {
    const updatedPairs = [...pairs];
    updatedPairs[index] = newPair;
    setPairs(updatedPairs);
  };

  // Handler for removing a pair.
  const handleRemovePair = (index) => {
    const updatedPairs = pairs.filter((_, i) => i !== index);
    setPairs(updatedPairs);
  };

  // Handler for adding a new empty pair.
  const handleAddPair = () => {
    setPairs([...pairs, { key: "", value: "" }]);
  };

  // Handler for submitting (saving) the properties file.
  const handleSubmit = async () => {
    const requirement = {
      requirementId: jiraKey,
      parameters: propertiesArrayToString(pairs),
      fileName: fileName,
    };
    setFormData(requirement);
    try {
      const response = await createCMPPropFile(requirement, appGlobalState);
      console.log("Response from createCMPPropFile:", response.data);
      if (response.data.statusCode === 201) {
        alert("Properties File created successfully!");
        navigate("/createdcmpjil", { state: jiraKey });
      } else {
        alert(
          "Error: " +
            response.data.statusCode +
            " Properties File creation failed!"
        );
      }
    } catch (err) {
      console.error(err);
      alert("Error creating properties file: " + err.message);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div style={{ color: "red" }}>Error: {error.message}</div>;

  return (
    <div className="applicationContainer">
      <IngressNavigation />
      <h5>Properties File Configuration</h5>
      <div className="editor-container">
        <div className="editor-left">
          <h6>Edit Key-Value Pairs</h6>
          {pairs.map((pair, index) => (
            <KeyValuePair
              key={index}
              index={index}
              pair={pair}
              onChange={handlePairChange}
              onRemove={handleRemovePair}
            />
          ))}
          <button onClick={handleAddPair} className="add-button">
            Add New Pair
          </button>
          <div className="button-container">
            <DiaasButton title="Generate Properties File" handleChange={handleSubmit} />
          </div>
        </div>
        <div className="editor-right">
          <h6>Live Preview</h6>
          <textarea
            readOnly
            value={previewText}
            className="preview-textarea"
          />
        </div>
      </div>
    </div>
  );
}
```

### 2. **KeyValuePair.jsx**

*(No changes needed here other than ensuring the styling matches the "=" format.)*

```jsx
// KeyValuePair.jsx
import React from "react";
import PropTypes from "prop-types";
import "./PropertiesEditor.css";

export default function KeyValuePair({ index, pair, onChange, onRemove }) {
  const handleKeyChange = (e) => {
    onChange(index, { ...pair, key: e.target.value });
  };

  const handleValueChange = (e) => {
    onChange(index, { ...pair, value: e.target.value });
  };

  return (
    <div className="pair-row">
      <input
        type="text"
        placeholder="Key"
        value={pair.key}
        onChange={handleKeyChange}
        className="pair-input"
      />
      <span className="colon-separator">=</span>
      <input
        type="text"
        placeholder="Value"
        value={pair.value}
        onChange={handleValueChange}
        className="pair-input"
      />
      <button onClick={() => onRemove(index)} className="remove-button">
        Remove
      </button>
    </div>
  );
}

KeyValuePair.propTypes = {
  index: PropTypes.number.isRequired,
  pair: PropTypes.shape({
    key: PropTypes.string,
    value: PropTypes.string,
  }).isRequired,
  onChange: PropTypes.func.isRequired,
  onRemove: PropTypes.func.isRequired,
};
```

### 3. **propertiesActions.js**

*(Same as before, with no change related to the "=" parsing.)*

```js
// propertiesActions.js
import axios from "axios";
import { MICROSERVICE_URL } from "../../../constant";
import { generateSearchHeader } from "../../../Authentication";

// Fetch the properties template.
export async function getPropertiesTemplate(appGlobalState) {
  const response = await axios.get(
    `${MICROSERVICE_URL}/api/v1/getPropertiesTemplate/COMPMPROP`,
    {
      headers: generateSearchHeader(appGlobalState),
    }
  );
  if (response.status !== 200 && response.status !== 201) {
    throw new Error(`Failed to fetch properties template: ${response.status}`);
  }
  return response.data;
}

// Fetch requirement details by requirement ID.
export async function getRequirementDetails(requirementId, appGlobalState) {
  const response = await axios.get(
    `${MICROSERVICE_URL}/api/v1/searchRequirementForReqID/${requirementId}`,
    {
      headers: generateSearchHeader(appGlobalState),
    }
  );
  if (response.status !== 200 && response.status !== 201) {
    throw new Error(`Failed to fetch requirement details: ${response.status}`);
  }
  return response;
}

// Create (POST) the properties file.
export async function createCMPPropFile(requirement, appGlobalState) {
  const response = await axios.post(
    `${MICROSERVICE_URL}/api/v1/createCMPPropFile`,
    requirement,
    {
      headers: generateSearchHeader(appGlobalState),
    }
  );
  return response;
}
```

### 4. **propertiesEndpoint.js** *(Optional)*

```js
// propertiesEndpoint.js
export const propertiesEndpoint = {
  GET_TEMPLATE: "/api/v1/getPropertiesTemplate/COMPMPROP",
  GET_REQUIREMENT: "/api/v1/searchRequirementForReqID/",
  CREATE_FILE: "/api/v1/createCMPPropFile",
};
```

### 5. **PropertiesEditor.css**

```css
/* PropertiesEditor.css */

.applicationContainer {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.editor-container {
  display: flex;
  gap: 20px;
  margin-top: 20px;
}

/* Left side styling */
.editor-left {
  flex: 1;
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 5px;
}

/* Right side styling */
.editor-right {
  flex: 1;
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 5px;
}

.pair-row {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
}

.pair-input {
  padding: 6px;
  margin-right: 4px;
  flex: 1;
}

.colon-separator {
  margin-right: 4px;
}

.remove-button {
  background-color: #ff4d4f;
  color: white;
  border: none;
  padding: 6px 10px;
  cursor: pointer;
}

.remove-button:hover {
  background-color: #e04343;
}

.add-button {
  margin-top: 10px;
  padding: 8px 12px;
  cursor: pointer;
}

.button-container {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.preview-textarea {
  width: 100%;
  height: 300px;
  padding: 10px;
  font-family: monospace;
  border: 1px solid #ccc;
  border-radius: 5px;
  resize: vertical;
}
```

### 6. **IngressNavigation.jsx (Stub)**

```jsx
// IngressNavigation.jsx
import React from "react";

export default function IngressNavigation() {
  return (
    <nav style={{ padding: "10px", backgroundColor: "#eee" }}>
      <span>Ingress Navigation</span>
    </nav>
  );
}
```

### 7. **DiaasButton.jsx (Stub)**

```jsx
// DiaasButton.jsx
import React from "react";
import PropTypes from "prop-types";

export default function DiaasButton({ title, handleChange }) {
  return (
    <button onClick={handleChange} style={{ padding: "10px 20px", fontSize: "16px" }}>
      {title}
    </button>
  );
}

DiaasButton.propTypes = {
  title: PropTypes.string.isRequired,
  handleChange: PropTypes.func.isRequired,
};
```

---

### Explanation Recap

- The **helper functions** now split lines using `"="` instead of `":"`.
- The **PropertiesEditor** fetches the template and requirement details once (using memoized dependencies) and converts the template string into an array of keyâ€“value pairs.
- The UI displays these pairs on the left side (editable rows using the **KeyValuePair** component) and a live preview (converted back to a string with "=") on the right.
- The **DiaasButton** triggers the submission, which sends the updated properties back to the backend.

This complete set of updated code files should meet your requirements. Let me know if you need further adjustments or clarifications!
