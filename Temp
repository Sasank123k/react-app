import React, { useEffect, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";

const GitHubIntegrationPage = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [repoOwner, setRepoOwner] = useState("");
  const [repoName, setRepoName] = useState("");
  const [branch, setBranch] = useState("main");
  const [filePath, setFilePath] = useState("data/config.json");
  const [jsonContent, setJsonContent] = useState('{ "key": "value" }');
  const [createBranch, setCreateBranch] = useState(false);
  const [statusMessage, setStatusMessage] = useState("");

  const navigate = useNavigate();
  const location = useLocation();

  // Check session by calling backend /test-session endpoint
  const checkSession = () => {
    fetch("http://localhost:8080/test-session", { credentials: "include" })
      .then((response) => response.text())
      .then((data) => {
        console.log("Session data:", data);
        if (data.includes("Stored Token:") && !data.includes("null")) {
          setIsAuthenticated(true);
        } else {
          setIsAuthenticated(false);
        }
      })
      .catch((error) => console.error("Error checking session:", error));
  };

  // Run session check on page load and when location changes
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    if (params.get("authenticated") === "true") {
      // Clean the URL by removing the query param
      navigate("/github-integration", { replace: true });
    }
    checkSession();
  }, [location, navigate]);

  // Initiate GitHub OAuth login (redirect to backend)
  const handleLogin = () => {
    window.location.href = "http://localhost:8080/login/github";
  };

  // Handle the form submission to push the JSON file
  const handlePushFile = (e) => {
    e.preventDefault();

    // Base64-encode the JSON content (required by GitHub API)
    const encodedContent = btoa(jsonContent);

    const payload = {
      repoOwner,
      repoName,
      branch,
      filePath,
      content: encodedContent,
      createBranch, // boolean flag for branch creation
    };

    fetch("http://localhost:8080/api/push-json", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
      credentials: "include", // include cookies for session
    })
      .then((response) => response.text())
      .then((data) => {
        setStatusMessage(data);
      })
      .catch((error) => {
        console.error("Error pushing file:", error);
        setStatusMessage("Error pushing file.");
      });
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial, sans-serif" }}>
      <h1>GitHub Integration Page</h1>
      {!isAuthenticated ? (
        <div>
          <p>You need to log in to GitHub first.</p>
          <button onClick={handleLogin}>Login with GitHub</button>
        </div>
      ) : (
        <div>
          <p style={{ color: "green" }}>âœ… You are logged in to GitHub!</p>
          <form onSubmit={handlePushFile}>
            <div>
              <label>Repo Owner:</label>
              <input
                type="text"
                value={repoOwner}
                onChange={(e) => setRepoOwner(e.target.value)}
                required
              />
            </div>
            <div>
              <label>Repo Name:</label>
              <input
                type="text"
                value={repoName}
                onChange={(e) => setRepoName(e.target.value)}
                required
              />
            </div>
            <div>
              <label>Branch:</label>
              <input
                type="text"
                value={branch}
                onChange={(e) => setBranch(e.target.value)}
                required
              />
            </div>
            <div>
              <label>File Path:</label>
              <input
                type="text"
                value={filePath}
                onChange={(e) => setFilePath(e.target.value)}
                required
              />
            </div>
            <div>
              <label>JSON Content:</label>
              <textarea
                rows="5"
                cols="50"
                value={jsonContent}
                onChange={(e) => setJsonContent(e.target.value)}
                required
              ></textarea>
            </div>
            <div>
              <label>
                <input
                  type="checkbox"
                  checked={createBranch}
                  onChange={(e) => setCreateBranch(e.target.checked)}
                />
                {"  "}Create branch if it does not exist
              </label>
            </div>
            <br />
            <button type="submit">Push JSON File</button>
          </form>
          {statusMessage && (
            <p style={{ marginTop: "10px" }}>{statusMessage}</p>
          )}
        </div>
      )}
    </div>
  );
};

export default GitHubIntegrationPage;
