import React, { useState } from 'react';
import axios from 'axios';

// Import authentication and constants
import { generateSearHeader } from '../../../Authentication';
import { useAppGlobalState } from '@wf/react-library';
import MICROSERVICE_URL from '../../../util/constant';

const RepoBranchSelectorWithManualPush = () => {
  // Form state
  const [owner, setOwner] = useState('');
  const [repo, setRepo] = useState('');
  const [branch, setBranch] = useState('');
  const [filePath, setFilePath] = useState('');
  const [commitMessage, setCommitMessage] = useState('');
  const [fileContent, setFileContent] = useState('');

  // UI state
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  const appGlobalState = useAppGlobalState();

  // Function to push the file
  const handlePushFile = async () => {
    setError(null);
    setSuccess(null);
    setLoading(true);

    if (!owner || !repo || !branch || !filePath || !commitMessage || !fileContent) {
      setError('Please fill in all fields.');
      setLoading(false);
      return;
    }

    try {
      const payload = {
        operation: 'addFile',
        owner: owner,
        repo: repo,
        filePath: filePath,
        commitMessage: commitMessage,
        content: btoa(fileContent), // Convert to Base64 for GitHub API
      };

      const response = await axios.post(`${MICROSERVICE_URL}/ghe/operation`, payload, {
        headers: generateSearHeader(appGlobalState),
        withCredentials: true,
      });

      setSuccess(`File successfully pushed to ${repo}/${branch}.`);
    } catch (err) {
      setError(`Error pushing file: ${err.response ? err.response.data : err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="repo-branch-card">
      <h2 className="repo-branch-title">Push a File to an Existing Branch</h2>
      {error && <div className="repo-branch-error">{error}</div>}
      {success && <div className="repo-branch-success">{success}</div>}

      <div className="repo-branch-form-group">
        <label>Owner Name:</label>
        <input type="text" value={owner} onChange={(e) => setOwner(e.target.value)} placeholder="Enter owner name" />
      </div>

      <div className="repo-branch-form-group">
        <label>Repository Name:</label>
        <input type="text" value={repo} onChange={(e) => setRepo(e.target.value)} placeholder="Enter repository name" />
      </div>

      <div className="repo-branch-form-group">
        <label>Branch Name:</label>
        <input type="text" value={branch} onChange={(e) => setBranch(e.target.value)} placeholder="Enter branch name" />
      </div>

      <div className="repo-branch-form-group">
        <label>File Path:</label>
        <input type="text" value={filePath} onChange={(e) => setFilePath(e.target.value)} placeholder="e.g., src/data.json" />
      </div>

      <div className="repo-branch-form-group">
        <label>Commit Message:</label>
        <input type="text" value={commitMessage} onChange={(e) => setCommitMessage(e.target.value)} placeholder="Enter commit message" />
      </div>

      <div className="repo-branch-form-group">
        <label>File Content:</label>
        <textarea value={fileContent} onChange={(e) => setFileContent(e.target.value)} placeholder="Enter file content"></textarea>
      </div>

      <button className="repo-branch-button" onClick={handlePushFile} disabled={loading}>
        {loading ? 'Pushing...' : 'Push File'}
      </button>
    </div>
  );
};

export default RepoBranchSelectorWithManualPush;
