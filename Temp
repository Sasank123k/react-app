Below is the full updated set of code files (except for endpoint.js, IngressNavigation, and DiaasButton, which you already have) with the UI changes you described. This version:

1. Increases the width of the key–value input boxes (doubling their previous width).
2. Uses a small cross (“×”) for the remove button.
3. Sets both the left (pairs) and right (live preview) panels to a fixed height of 500px with vertical scrolling.
4. Places the “Generate Properties File” button below the two-column editor container.

Review the code below and let me know if you have any questions.

---

### 1. PropertiesEditor.jsx

```jsx
// PropertiesEditor.jsx
import React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import { useNavigate, useLocation } from "react-router-dom";
import { useAppGlobalState } from "@wf/react-library";
import { MICROSERVICE_URL } from "../../../constant";
import { generateSearchHeader } from "../../../Authentication";
import IngressNavigation from "../../Workflow/IngressNavigation";
import DiaasButton from "../../../components/DiaasButton";
import "./PropertiesEditor.css";
import {
  getPropertiesTemplate,
  getRequirementDetails,
  createCMPPropFile,
} from "./propertiesActions";
import KeyValuePair from "./KeyValuePair";

// Helper to parse a raw properties string using "=" as separator.
function parsePropertiesString(str) {
  if (!str) return [];
  const lines = str.split("\n");
  const pairs = lines.map(line => {
    const equalIndex = line.indexOf("=");
    if (equalIndex !== -1) {
      const key = line.slice(0, equalIndex).trim();
      const value = line.slice(equalIndex + 1).trim();
      return { key, value };
    } else {
      return { key: line.trim(), value: "" };
    }
  });
  return pairs;
}

// Helper to convert an array of key-value pairs back to a properties string.
function propertiesArrayToString(pairs) {
  return pairs.map(pair => `${pair.key}=${pair.value}`).join("\n");
}

export default function PropertiesEditor() {
  const appGlobalState = useAppGlobalState();
  const [fileName, setFileName] = useState("");
  const [pairs, setPairs] = useState([]); // Array of { key, value }
  const [jiraKey, setJiraKey] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [formData, setFormData] = useState(null);
  const [previewText, setPreviewText] = useState("");

  const location = useLocation();
  const navigate = useNavigate();

  // Memoize location.state so that it remains stable
  const stableLocationState = useMemo(() => location.state, [location.state]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        // 1. Fetch the default properties template.
        const templateResponse = await getPropertiesTemplate(appGlobalState);
        console.log("Template Response Data:", templateResponse);
        if (
          templateResponse &&
          templateResponse.templateObjList &&
          templateResponse.templateObjList.length > 0
        ) {
          const templateStr = templateResponse.templateObjList[0].json;
          const parsedPairs = parsePropertiesString(templateStr);
          setPairs(parsedPairs);
        } else {
          throw new Error("No template object found in the response");
        }

        // 2. Fetch requirement details using the stable location state.
        const reqResponse = await getRequirementDetails(stableLocationState, appGlobalState);
        console.log("Requirement Response Data:", reqResponse.data);
        if (reqResponse && reqResponse.data && reqResponse.data.length > 0) {
          setFileName(reqResponse.data[0].tableName);
          setJiraKey(reqResponse.data[0].requirementId);
        } else {
          throw new Error("No requirement details found");
        }
      } catch (err) {
        setError(err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [stableLocationState, appGlobalState]);

  // Update formData and live preview when jiraKey, fileName, or pairs change.
  useEffect(() => {
    const parameters = propertiesArrayToString(pairs);
    setFormData({
      requirementId: jiraKey,
      parameters,
      fileName,
    });
    setPreviewText(parameters);
  }, [jiraKey, fileName, pairs]);

  // Handlers for key-value pair changes.
  const handlePairChange = (index, newPair) => {
    const updatedPairs = [...pairs];
    updatedPairs[index] = newPair;
    setPairs(updatedPairs);
  };

  const handleRemovePair = (index) => {
    const updatedPairs = pairs.filter((_, i) => i !== index);
    setPairs(updatedPairs);
  };

  const handleAddPair = () => {
    setPairs([...pairs, { key: "", value: "" }]);
  };

  // Submit updated properties file.
  const handleSubmit = async () => {
    const requirement = {
      requirementId: jiraKey,
      parameters: propertiesArrayToString(pairs),
      fileName: fileName,
    };
    setFormData(requirement);
    try {
      const response = await createCMPPropFile(requirement, appGlobalState);
      console.log("Response from createCMPPropFile:", response.data);
      if (response.data.statusCode === 201) {
        alert("Properties File created successfully!");
        navigate("/createdcmpjil", { state: jiraKey });
      } else {
        alert(
          "Error: " +
            response.data.statusCode +
            " Properties File creation failed!"
        );
      }
    } catch (err) {
      console.error(err);
      alert("Error creating properties file: " + err.message);
    }
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div style={{ color: "red" }}>Error: {error.message}</div>;

  return (
    <div className="applicationContainer">
      <IngressNavigation />
      <h5>Properties File Configuration</h5>
      <div className="editor-container">
        {/* Left panel: Editable key-value pairs */}
        <div className="editor-left">
          <h6>Edit Key-Value Pairs</h6>
          <div className="pairs-scroll">
            {pairs.map((pair, index) => (
              <KeyValuePair
                key={index}
                index={index}
                pair={pair}
                onChange={handlePairChange}
                onRemove={handleRemovePair}
              />
            ))}
          </div>
          <button onClick={handleAddPair} className="add-button">
            Add New Pair
          </button>
        </div>
        {/* Right panel: Live preview */}
        <div className="editor-right">
          <h6>Live Preview</h6>
          <div className="preview-scroll">
            <textarea
              readOnly
              value={previewText}
              className="preview-textarea"
            />
          </div>
        </div>
      </div>
      {/* Generate button placed below the editor container */}
      <div className="generate-button-container">
        <DiaasButton title="Generate Properties File" handleChange={handleSubmit} />
      </div>
    </div>
  );
}
```

---

### 2. KeyValuePair.jsx

```jsx
// KeyValuePair.jsx
import React from "react";
import PropTypes from "prop-types";
import "./PropertiesEditor.css";

export default function KeyValuePair({ index, pair, onChange, onRemove }) {
  const handleKeyChange = (e) => {
    onChange(index, { ...pair, key: e.target.value });
  };

  const handleValueChange = (e) => {
    onChange(index, { ...pair, value: e.target.value });
  };

  return (
    <div className="pair-row">
      <input
        type="text"
        placeholder="Key"
        value={pair.key}
        onChange={handleKeyChange}
        className="pair-input"
      />
      <span className="colon-separator">=</span>
      <input
        type="text"
        placeholder="Value"
        value={pair.value}
        onChange={handleValueChange}
        className="pair-input"
      />
      <button onClick={() => onRemove(index)} className="remove-button">
        ×
      </button>
    </div>
  );
}

KeyValuePair.propTypes = {
  index: PropTypes.number.isRequired,
  pair: PropTypes.shape({
    key: PropTypes.string,
    value: PropTypes.string,
  }).isRequired,
  onChange: PropTypes.func.isRequired,
  onRemove: PropTypes.func.isRequired,
};
```

---

### 3. propertiesActions.js

```js
// propertiesActions.js
import axios from "axios";
import { MICROSERVICE_URL } from "../../../constant";
import { generateSearchHeader } from "../../../Authentication";

// Fetch the properties template.
export async function getPropertiesTemplate(appGlobalState) {
  const response = await axios.get(
    `${MICROSERVICE_URL}/api/v1/getPropertiesTemplate/COMPMPROP`,
    {
      headers: generateSearchHeader(appGlobalState),
    }
  );
  if (response.status !== 200 && response.status !== 201) {
    throw new Error(`Failed to fetch properties template: ${response.status}`);
  }
  return response.data;
}

// Fetch requirement details by requirement ID.
export async function getRequirementDetails(requirementId, appGlobalState) {
  const response = await axios.get(
    `${MICROSERVICE_URL}/api/v1/searchRequirementForReqID/${requirementId}`,
    {
      headers: generateSearchHeader(appGlobalState),
    }
  );
  if (response.status !== 200 && response.status !== 201) {
    throw new Error(`Failed to fetch requirement details: ${response.status}`);
  }
  return response;
}

// Create (POST) the properties file using fetch.
export async function createCMPPropFile(requirement, appGlobalState) {
  const response = await fetch(`${MICROSERVICE_URL}/api/v1/createCMPPropFile`, {
    method: "POST",
    headers: generateSearchHeader(appGlobalState),
    body: JSON.stringify(requirement),
  });
  return response.json();
}
```

---

### 4. PropertiesEditor.css

```css
/* PropertiesEditor.css */

.applicationContainer {
  max-width: 900px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.editor-container {
  display: flex;
  gap: 20px;
  margin-top: 20px;
}

/* Left panel styling */
.editor-left {
  flex: 1;
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 5px;
  /* Set fixed height and enable vertical scroll */
  height: 500px;
  overflow-y: auto;
}

/* Right panel styling */
.editor-right {
  flex: 1;
  border: 1px solid #ccc;
  padding: 15px;
  border-radius: 5px;
  /* Set fixed height and enable vertical scroll */
  height: 500px;
  overflow-y: auto;
}

.pair-row {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
}

/* Increase width of key-value input boxes (double the previous width) */
.pair-input {
  padding: 8px; /* slightly increased padding */
  margin-right: 8px;
  flex: 1;
  min-width: 300px;  /* assuming previous was around 150px */
}

.colon-separator {
  margin-right: 8px;
}

/* Small cross button for removal */
.remove-button {
  background-color: transparent;
  color: red;
  border: none;
  font-size: 18px;
  cursor: pointer;
  padding: 2px 6px;
}

.remove-button:hover {
  color: darkred;
}

.add-button {
  margin-top: 10px;
  padding: 8px 12px;
  cursor: pointer;
}

.generate-button-container {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

/* Styling for live preview textarea */
.preview-textarea {
  width: 100%;
  height: 100%;
  padding: 10px;
  font-family: monospace;
  border: 1px solid #ccc;
  border-radius: 5px;
  resize: none;
}

/* Add scroll containers if needed */
.pairs-scroll {
  height: 100%;
  overflow-y: auto;
}

.preview-scroll {
  height: 100%;
  overflow-y: auto;
}
```

---

### Explanation Recap

- **PropertiesEditor.jsx:**  
  - Uses memoization to avoid infinite API calls.  
  - Fetches the template and requirement details, then parses the properties string using "=" as the separator.  
  - Renders a two-column layout with the left panel showing editable key–value pairs (via KeyValuePair components) and the right panel displaying a live preview.  
  - Places the generate button outside of the scrollable panels.

- **KeyValuePair.jsx:**  
  - Renders each pair with larger input boxes and a small cross button for removal.

- **propertiesActions.js:**  
  - Uses axios for GET endpoints and fetch for the POST endpoint (mimicking the old behavior).

- **PropertiesEditor.css:**  
  - Adjusts widths, sets a fixed height (500px) with scrollable areas, and applies updated styling as requested.

Feel free to adjust any dimensions or styles further as needed. Let me know if you need any more changes or further clarifications!
