import React, { useState, useEffect } from 'react';
import axios from 'axios';

// Import paths updated according to your project structure
import { generateSearHeader } from '../../../Authentication';
import { useAppGlobalState } from '@wf/react-library';
import MICROSERVICE_URL from '../../../util/constant';

const NewBranchCreator = () => {
  // Toggle for manual entry mode
  const [manualEntry, setManualEntry] = useState(false);

  // States for dropdown mode (when manualEntry is false)
  const [isAuthenticated, setIsAuthenticated] = useState(null);
  const [repositories, setRepositories] = useState([]);
  const [selectedRepo, setSelectedRepo] = useState(null);
  const [branches, setBranches] = useState([]);
  const [selectedBranch, setSelectedBranch] = useState('');
  const [loadingRepos, setLoadingRepos] = useState(false);
  const [loadingBranches, setLoadingBranches] = useState(false);

  // States for manual entry fields (when manualEntry is true)
  const [manualOwner, setManualOwner] = useState('');
  const [manualRepo, setManualRepo] = useState('');
  const [manualBaseBranch, setManualBaseBranch] = useState('');

  // States for new branch and file push details
  const [newBranch, setNewBranch] = useState('');
  const [filePath, setFilePath] = useState('');
  const [commitMessage, setCommitMessage] = useState('');
  const [fileContent, setFileContent] = useState('');

  // UI feedback state
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  const appGlobalState = useAppGlobalState();

  // Fetch repositories only if manualEntry is false
  useEffect(() => {
    if (manualEntry) return;
    const fetchRepositories = async () => {
      setLoadingRepos(true);
      try {
        const response = await axios.get(`${MICROSERVICE_URL}/ghe/repositories`, {
          headers: generateSearHeader(appGlobalState),
          withCredentials: true,
        });
        setRepositories(response.data);
        setIsAuthenticated(true);
      } catch (err) {
        if (err.response && err.response.status === 401) {
          setIsAuthenticated(false);
        } else {
          setError(err.response ? err.response.data : err.message);
        }
      } finally {
        setLoadingRepos(false);
      }
    };
    fetchRepositories();
  }, [appGlobalState, manualEntry]);

  // Fetch branches when a repository is selected (in dropdown mode)
  useEffect(() => {
    if (manualEntry) return;
    const fetchBranches = async () => {
      setLoadingBranches(true);
      try {
        const response = await axios.get(`${MICROSERVICE_URL}/ghe/branches`, {
          params: {
            owner: selectedRepo.owner,
            repo: selectedRepo.name,
          },
          headers: generateSearHeader(appGlobalState),
          withCredentials: true,
        });
        setBranches(response.data);
      } catch (err) {
        setError(err.response ? err.response.data : err.message);
      } finally {
        setLoadingBranches(false);
      }
    };
    if (selectedRepo) {
      fetchBranches();
    }
  }, [selectedRepo, appGlobalState, manualEntry]);

  // Handler for repository selection (dropdown mode)
  const handleRepoChange = (e) => {
    const repoName = e.target.value;
    const repo = repositories.find((r) => r.name === repoName);
    setSelectedRepo(repo);
    setSelectedBranch('');
    setBranches([]);
  };

  // Handler for branch selection (dropdown mode)
  const handleBranchChange = (e) => {
    setSelectedBranch(e.target.value);
  };

  // Toggle between dropdown and manual entry modes
  const handleManualToggle = () => {
    setManualEntry(!manualEntry);
    // Reset fields when toggling
    setSelectedRepo(null);
    setSelectedBranch('');
    setRepositories([]);
    setBranches([]);
    setManualOwner('');
    setManualRepo('');
    setManualBaseBranch('');
  };

  // On form submit: create branch and then push file
  const handleSubmit = async () => {
    setError(null);
    setSuccess(null);
    let owner, repoName, baseBranch;
    if (manualEntry) {
      if (!manualOwner || !manualRepo || !manualBaseBranch || !newBranch || !filePath || !commitMessage || !fileContent) {
        setError('Please fill in all fields.');
        return;
      }
      owner = manualOwner;
      repoName = manualRepo;
      baseBranch = manualBaseBranch;
    } else {
      if (!selectedRepo || !selectedBranch || !newBranch || !filePath || !commitMessage || !fileContent) {
        setError('Please fill in all fields.');
        return;
      }
      owner = selectedRepo.owner;
      repoName = selectedRepo.name;
      baseBranch = selectedBranch;
    }
    setLoading(true);
    try {
      // Step 1: Create the new branch
      // (Leave baseSha empty; backend will retrieve it using baseBranch)
      const createBranchPayload = {
        operation: 'createBranch',
        owner: owner,
        repo: repoName,
        newBranch: newBranch,
        baseSha: "",
        baseBranch: baseBranch,
      };
      const branchResponse = await axios.post(`${MICROSERVICE_URL}/ghe/operation`, createBranchPayload, {
        headers: generateSearHeader(appGlobalState),
        withCredentials: true,
      });
      console.log("Branch creation response:", branchResponse.data);

      // Conditional check: Verify that the branch creation response indicates success.
      // (For example, check if the response contains the new branch reference.)
      if (!branchResponse.data || !branchResponse.data.includes(`refs/heads/${newBranch}`)) {
        setError("Branch creation failed; file push aborted.");
        setLoading(false);
        return;
      }

      // Step 2: Push the file into the new branch
      const filePayload = {
        operation: 'addFile',
        owner: owner,
        repo: repoName,
        filePath: filePath,
        commitMessage: commitMessage,
        content: btoa(fileContent), // Base64 encode file content
        newBranch: newBranch,
      };
      const fileResponse = await axios.post(`${MICROSERVICE_URL}/ghe/operation`, filePayload, {
        headers: generateSearHeader(appGlobalState),
        withCredentials: true,
      });
      console.log("File push response:", fileResponse.data);

      setSuccess(`New branch '${newBranch}' created from '${baseBranch}' and file pushed successfully.`);
    } catch (err) {
      setError(`Error: ${err.response ? err.response.data : err.message}`);
    } finally {
      setLoading(false);
    }
  };

  if (isAuthenticated === false) {
    return (
      <div>
        <h2>Authentication Required</h2>
        <p>Please log in with GitHub.</p>
      </div>
    );
  }

  return (
    <div className="new-branch-creator">
      <h2>Create a New Branch and Push a File</h2>
      {error && <div className="error">{error}</div>}
      {success && <div className="success">{success}</div>}

      {/* Toggle for manual entry */}
      <div className="form-group">
        <label>
          <input type="checkbox" checked={manualEntry} onChange={handleManualToggle} />
          Enter repository details manually
        </label>
      </div>

      {/* Dropdown mode */}
      {!manualEntry && (
        <>
          <div className="form-group">
            <label>Repository:</label>
            {loadingRepos ? (
              <p>Loading repositories...</p>
            ) : (
              <select value={selectedRepo ? selectedRepo.name : ''} onChange={handleRepoChange}>
                <option value="">-- Select Repository --</option>
                {repositories.map((repo) => (
                  <option key={repo.name} value={repo.name}>
                    {repo.name} ({repo.owner})
                  </option>
                ))}
              </select>
            )}
          </div>
          {selectedRepo && (
            <div className="form-group">
              <label>Base Branch:</label>
              {loadingBranches ? (
                <p>Loading branches...</p>
              ) : (
                <select value={selectedBranch} onChange={handleBranchChange}>
                  <option value="">-- Select Branch --</option>
                  {branches.map((branch) => (
                    <option key={branch} value={branch}>
                      {branch}
                    </option>
                  ))}
                </select>
              )}
            </div>
          )}
        </>
      )}

      {/* Manual entry mode */}
      {manualEntry && (
        <>
          <div className="form-group">
            <label>Owner Name:</label>
            <input
              type="text"
              value={manualOwner}
              onChange={(e) => setManualOwner(e.target.value)}
              placeholder="Enter owner name"
            />
          </div>
          <div className="form-group">
            <label>Repository Name:</label>
            <input
              type="text"
              value={manualRepo}
              onChange={(e) => setManualRepo(e.target.value)}
              placeholder="Enter repository name"
            />
          </div>
          <div className="form-group">
            <label>Base Branch:</label>
            <input
              type="text"
              value={manualBaseBranch}
              onChange={(e) => setManualBaseBranch(e.target.value)}
              placeholder="Enter base branch name"
            />
          </div>
        </>
      )}

      {/* New branch and file push fields */}
      <div className="form-group">
        <label>New Branch Name:</label>
        <input
          type="text"
          value={newBranch}
          onChange={(e) => setNewBranch(e.target.value)}
          placeholder="Enter new branch name"
        />
      </div>

      <hr />

      <h3>Push File Details</h3>
      <div className="form-group">
        <label>File Path:</label>
        <input
          type="text"
          value={filePath}
          onChange={(e) => setFilePath(e.target.value)}
          placeholder="e.g., src/data.json"
        />
      </div>
      <div className="form-group">
        <label>Commit Message:</label>
        <input
          type="text"
          value={commitMessage}
          onChange={(e) => setCommitMessage(e.target.value)}
          placeholder="Enter commit message"
        />
      </div>
      <div className="form-group">
        <label>File Content:</label>
        <textarea
          value={fileContent}
          onChange={(e) => setFileContent(e.target.value)}
          placeholder="Enter file content"
        />
      </div>

      <button onClick={handleSubmit} disabled={loading}>
        {loading ? 'Processing...' : 'Create Branch & Push File'}
      </button>
    </div>
  );
};

export default NewBranchCreator;
